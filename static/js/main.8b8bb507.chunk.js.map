{"version":3,"sources":["containers/AlgorithmViz/VizComponent/MergeSortViz/MergeSortViz.module.css","app/const/const.ts","app/hooks/reduxHooks.ts","app/hooks/useCustomColors.ts","app/selectors.ts","containers/AlgorithmSelector/slice.ts","containers/AlgorithmSelector/AlgorithmSelector.tsx","app/factories/array.ts","app/store.ts","containers/AlgorithmViz/VizComponent/SelectionSortViz/algo.ts","dump/AppHeader/AppHeader.tsx","dump/CenteredFlexBox/CenteredFlexBox.tsx","dump/ArrayAnimatedElement/ArrayAnimatedElement.tsx","dump/ArrayIterationData/ArrayIterationData.tsx","containers/AlgorithmViz/VizComponent/SelectionSortViz/SelectionSortViz.tsx","containers/AlgorithmViz/VizComponent/InsertionSortViz/algo.ts","containers/AlgorithmViz/VizComponent/InsertionSortViz/InsertionSortViz.tsx","containers/AlgorithmViz/VizComponent/BubbleSortViz/algo.ts","containers/AlgorithmViz/VizComponent/BubbleSortViz/BubbleSortViz.tsx","containers/AlgorithmViz/VizComponent/MergeSortViz/algo.ts","containers/AlgorithmViz/VizComponent/MergeSortViz/MergeSortViz.tsx","containers/AlgorithmViz/vizMap.ts","containers/AlgorithmViz/AlgorithmViz.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ALGOS","useAppSelector","useSelector","useCustomColors","useTheme","colors","saltBox","persimmon","tidal","mulberry","DEFAULT_STEP_TIME","selectSelectedAlgo","algorithm","slice","createSlice","name","initialState","reducers","selectAlgorithm","_","payload","actions","keys","Object","AlgorithmSelector","dispatch","useDispatch","selected","map","algo","size","disabled","colorScheme","borderRadius","h","p","m","onClick","width","bg","w","color","startCase","memo","factArr","length","Array","from","random","store","configureStore","reducer","AlgorithmReducer","selectionSort","arr","setI","setJ","setMinIdx","setArray","a","stepSpeed","copy","i","minIdx","j","Promise","res","rej","setTimeout","getState","SELECTION_SORT","Error","AppHeader","theme","as","flex","mb","padding","purple","align","variant","aria-label","fontSize","icon","Sun","CenteredFlexBox","styled","Flex","defaultProps","justifyContent","alignItems","display","ArrayAnimatedElement","animated","textAlign","height","margin","ArrayIterationData","index","array","text","hidden","mr","SelectionSortViz","useState","started","setStarted","springs","useSprings","backgroundColor","boxShadow","opacity","startAlgo","isLoading","fontWeight","flexWrap","props","style","insertionSort","setKey","key","INSERTION_SORT","InsertionSortViz","keyIdx","setKeyInx","bubbleSort","setLeft","setRight","right","left","x","BubbleSortViz","leftIndex","rightIndex","floor","Math","mergeSort","setTree","compareColor","mid","leftArray","rightArray","produce","prev","children","createName","sleep","leftLvl1","leftArray2","leftLvl2","original","obj","sort","b","leftRight","leftRightRight","rightLvl1","rightLvl2","rightRight","rightRightRight","rightright","toString","MergeSortViz","tree","foreignObjectProps","translate","window","innerWidth","y","data","renderCustomNodeElement","rd3tProps","nodeDatum","fillColor","r","fill","renderForeignObjectNode","pathClassFunc","styles","node__path","orientation","freeze","BUBBLE_SORT","MERGE_SORT","AlgorithmViz","vizMap","VIZ","extendTheme","config","initialColorMode","useSystemColorMode","App","flexDir","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b8bb507.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"node__root\":\"MergeSortViz_node__root__2Sd86\",\"node__branch\":\"MergeSortViz_node__branch__uRYqa\",\"node__leaf\":\"MergeSortViz_node__leaf__1ZJAp\",\"node__path\":\"MergeSortViz_node__path__3kCC3\",\"colors\":\"MergeSortViz_colors__1y244\"};","import { Colors } from '@chakra-ui/react'\r\n\r\nexport enum ALGOS {\r\n  SELECTION_SORT = 'SELECTION_SORT',\r\n  BUBBLE_SORT = 'BUBBLE_SORT',\r\n  INSERTION_SORT = 'INSERTION_SORT',\r\n  MERGE_SORT = 'MERGE_SORT',\r\n}\r\n\r\nexport const DEFAULT_STEP_TIME = 1000\r\n\r\nexport interface AppColors extends Colors {\r\n  [key: string]: string\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import { useTheme, Theme } from '@chakra-ui/react'\r\nimport { AppColors } from 'app/const'\r\n\r\nexport const useCustomColors = () => {\r\n  const { colors }: Theme = useTheme()\r\n  const { saltBox, persimmon, tidal, mulberry } = colors as unknown as AppColors\r\n  return { saltBox, persimmon, tidal, mulberry }\r\n}\r\n","import { RootState } from './store'\r\nimport { ALGOS } from 'app/const'\r\n\r\nexport const selectSelectedAlgo = ({ algorithm }: RootState): ALGOS | null =>\r\n  algorithm\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ALGOS } from 'app/const'\r\n\r\ntype ALGOState = ALGOS | null\r\n\r\nconst slice = createSlice({\r\n  name: 'algorithm',\r\n  initialState: null as ALGOState,\r\n  reducers: {\r\n    selectAlgorithm(_, { payload }: PayloadAction<ALGOS>) {\r\n      return payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { selectAlgorithm } = slice.actions\r\n\r\nexport default slice.reducer\r\n","import { FC, memo } from 'react'\r\nimport { Heading, Button } from '@chakra-ui/react'\r\nimport { useAppSelector, useAppDispatch } from 'app/hooks'\r\nimport { ALGOS } from 'app/const'\r\nimport { selectSelectedAlgo } from 'app/selectors'\r\nimport { startCase } from 'lodash'\r\nimport { selectAlgorithm } from './slice'\r\n\r\nconst keys = Object.keys(ALGOS)\r\n\r\nconst AlgorithmSelector: FC = () => {\r\n  const dispatch = useAppDispatch()\r\n  const selected: ALGOS | null = useAppSelector(selectSelectedAlgo)\r\n\r\n  return (\r\n    <section>\r\n      {keys.map((algo: string) => (\r\n        <Button\r\n          key={algo}\r\n          size=\"sm\"\r\n          disabled={selected === algo}\r\n          colorScheme=\"purple\"\r\n          borderRadius=\"full\"\r\n          h=\"10\"\r\n          p=\"5\"\r\n          m=\"5\"\r\n          onClick={() =>\r\n            dispatch(selectAlgorithm((ALGOS as any)[algo] as ALGOS))\r\n          }\r\n          width=\"75%\"\r\n          bg={selected === algo ? 'purple.900' : 'purple.700'}\r\n        >\r\n          <Heading size=\"sm\" w=\"100%\" color=\"white\">\r\n            {startCase(algo)}\r\n          </Heading>\r\n        </Button>\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default memo(AlgorithmSelector)\r\n","import { random } from 'lodash'\r\n\r\nexport const factArr = (length = 10) =>\r\n  Array.from({ length }).map(() => random(-10, 100))\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\r\nimport { AlgorithmReducer } from 'containers'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    algorithm: AlgorithmReducer,\r\n  },\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n","import { store } from 'app/store'\r\nimport { DEFAULT_STEP_TIME,ALGOS } from 'app/const'\r\n\r\nexport const selectionSort = async (\r\n  arr: Array<number>,\r\n  setI: (n: number) => void,\r\n  setJ: (n: number) => void,\r\n  setMinIdx: (n: number) => void,\r\n  setArray: (arr: Array<number>) => void,\r\n  stepSpeed: number = DEFAULT_STEP_TIME\r\n) => {\r\n  const copy = [...arr]\r\n  let minIdx: any\r\n  for (let i = 0; i < copy.length; i++) {\r\n    minIdx = i\r\n    for (let j = i + 1; j < arr.length; j++) {\r\n      try {\r\n        await new Promise<void>((res, rej) =>\r\n          setTimeout(() => {\r\n            if (store.getState().algorithm !== ALGOS.SELECTION_SORT) {\r\n              rej()\r\n            } else {\r\n              res()\r\n            }\r\n          }, stepSpeed)\r\n        )\r\n      } catch {\r\n        throw new Error('Nothing')\r\n      }\r\n      setI(i)\r\n      setJ(j)\r\n      setMinIdx(minIdx)\r\n      if (copy[j] < copy[minIdx]) {\r\n        minIdx = j\r\n      }\r\n    }\r\n    ;[copy[minIdx], copy[i]] = [copy[i], copy[minIdx]]\r\n    setArray(copy)\r\n  }\r\n}\r\n","import { FC, memo } from 'react'\r\nimport { Flex, Heading, useTheme, Theme, IconButton } from '@chakra-ui/react'\r\nimport { SunIcon } from '@chakra-ui/icons'\r\n\r\nconst AppHeader: FC = () => {\r\n  const theme: Theme = useTheme()\r\n\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      flex=\"1\"\r\n      mb={4}\r\n      padding=\"1rem\"\r\n      bg={theme.colors.purple[700]}\r\n      color=\"white\"\r\n    >\r\n      <Flex align=\"center\">\r\n        <Heading size=\"sm\">TODO</Heading>\r\n      </Flex>\r\n      <Flex flex={1} />\r\n      <IconButton\r\n        variant=\"outline\"\r\n        aria-label=\"Theme changer\"\r\n        fontSize=\"20px\"\r\n        icon={<SunIcon />}\r\n      />\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(AppHeader)\r\n","import { memo } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Flex } from '@chakra-ui/react'\r\n\r\nconst CenteredFlexBox = styled(Flex)``\r\n\r\nCenteredFlexBox.defaultProps = {\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  display: 'flex',\r\n}\r\n\r\nexport default memo(CenteredFlexBox)\r\n","import { animated } from 'react-spring'\r\nimport styled from '@emotion/styled'\r\nimport { Flex } from '@chakra-ui/react'\r\n\r\nconst ArrayAnimatedElement = styled(animated(Flex))`\r\n  cursor: pointer;\r\n`\r\n\r\nArrayAnimatedElement.defaultProps = {\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  display: 'flex',\r\n  textAlign: 'center',\r\n  height: 60,\r\n  margin: '1rem',\r\n  fontSize: 40,\r\n}\r\n\r\nexport default ArrayAnimatedElement\r\n","import { memo } from 'react'\r\nimport { Flex, Tag, Kbd } from '@chakra-ui/react'\r\nimport { CenteredFlexBox } from 'dump'\r\n\r\ninterface Props {\r\n  index: number | null\r\n  array: Array<number>\r\n  color: string\r\n  text: string\r\n}\r\n\r\nconst ArrayIterationData = ({ index, array, color, text }: Props) => {\r\n  return (\r\n    <Flex m=\"1rem\" hidden={index === null}>\r\n      <CenteredFlexBox>\r\n        <Tag size=\"sm\" variant=\"solid\" bg={color} mr=\"2\" />\r\n        <Kbd>{text}</Kbd> = <Kbd>{index}</Kbd>\r\n        <Kbd m=\"2\">value</Kbd> =\r\n        <Kbd m=\"2\">[{index === null ? '' : array[index]}]</Kbd>\r\n      </CenteredFlexBox>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(ArrayIterationData)\r\n","import { memo, FC, useState } from 'react'\r\nimport { Flex, Button, Box, Divider, Text } from '@chakra-ui/react'\r\nimport { useSprings } from 'react-spring'\r\nimport { factArr } from 'app/factories'\r\nimport { useCustomColors } from 'app/hooks'\r\nimport { selectionSort } from './algo'\r\nimport { DEFAULT_STEP_TIME, ALGOS } from 'app/const'\r\nimport { ArrayAnimatedElement, ArrayIterationData } from 'dump'\r\n\r\nimport { store } from 'app/store'\r\n\r\nconst SelectionSortViz: FC = () => {\r\n  const [array, setArray] = useState<Array<number>>(factArr())\r\n  const [i, setI] = useState<number | null>(null)\r\n  const [j, setJ] = useState<number | null>(null)\r\n  const [minIdx, setMinIdx] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const { saltBox, persimmon, tidal } = useCustomColors()\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor: i === index || j === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow: index === minIdx ? `5px 10px ${tidal}` : `0px 0px ${tidal}`,\r\n      opacity: i === index ? 0.5 : 1,\r\n      height: 60,\r\n      from: { opacity: 0, height: 120 },\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    try {\r\n      await selectionSort(\r\n        array,\r\n        setI,\r\n        setJ,\r\n        setMinIdx,\r\n        setArray,\r\n        DEFAULT_STEP_TIME\r\n      )\r\n    } catch (error) {\r\n      // Display error message\r\n    }\r\n    if (store.getState().algorithm === ALGOS.SELECTION_SORT) {\r\n      setI(null)\r\n      setJ(null)\r\n      setMinIdx(null)\r\n      setStarted(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m=\"1rem\"\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight=\"bold\" flexWrap=\"wrap\">\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n      <Box hidden={i === null && j === null && minIdx === null}>\r\n        <Divider />\r\n        <Flex>\r\n          <Text fontSize=\"4xl\">Iteration data</Text>\r\n        </Flex>\r\n      </Box>\r\n      <ArrayIterationData index={i} color={saltBox} array={array} text=\"i\" />\r\n      <ArrayIterationData index={j} color={saltBox} array={array} text=\"j\" />\r\n      <ArrayIterationData\r\n        index={minIdx}\r\n        color={tidal}\r\n        array={array}\r\n        text=\"current min index\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(SelectionSortViz)\r\n","import { store } from 'app/store'\r\nimport { ALGOS } from 'app/const'\r\n\r\nexport const insertionSort = async (\r\n  arr: Array<number>,\r\n  setI: (n: number) => void,\r\n  setJ: (n: number) => void,\r\n  setKey: (n: number) => void,\r\n  stepSpeed: number = 1000\r\n) => {\r\n  let key: any\r\n  let j: any\r\n  for (let i = 1; i < arr.length; i++) {\r\n    key = arr[i]\r\n    setKey(i)\r\n    setI(i)\r\n    j = i - 1\r\n    setJ(j)\r\n    while (j >= 0 && arr[j] > key) {\r\n      try {\r\n        await new Promise<void>((res, rej) =>\r\n          setTimeout(() => {\r\n            if (store.getState().algorithm !== ALGOS.INSERTION_SORT) {\r\n              rej()\r\n            } else {\r\n              res()\r\n            }\r\n          }, stepSpeed)\r\n        )\r\n      } catch {\r\n        throw new Error('Nothing')\r\n      }\r\n      arr[j + 1] = arr[j]\r\n      j--\r\n      setJ(j)\r\n      arr[j + 1] = key\r\n      setKey(j + 1)\r\n    }\r\n  }\r\n  return arr\r\n}\r\n","import { memo, FC, useState } from 'react'\r\nimport {\r\n  Flex,\r\n  Button,\r\n  Box,\r\n  Theme,\r\n  useTheme,\r\n  Divider,\r\n  Text\r\n} from '@chakra-ui/react'\r\nimport { useSprings } from 'react-spring'\r\nimport { random } from 'lodash'\r\nimport { insertionSort } from './algo'\r\nimport { DEFAULT_STEP_TIME, AppColors, ALGOS } from 'app/const'\r\nimport { ArrayAnimatedElement, ArrayIterationData } from 'dump'\r\nimport { store } from 'app/store'\r\n\r\nconst array = Array.from({ length: 10 }).map(() => random(0, 100))\r\n\r\nconst InsertionSortViz: FC = () => {\r\n  const [i, setI] = useState<number | null>(null)\r\n  const [j, setJ] = useState<number | null>(null)\r\n  const [keyIdx, setKeyInx] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n\r\n  const { colors }: Theme = useTheme()\r\n  const { saltBox, persimmon, tidal } = colors as unknown as AppColors\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor: i === index || j === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow: index === keyIdx ? `5px 10px ${tidal}` : `0px 0px ${tidal}`,\r\n      opacity: i === index ? 0.5 : 1,\r\n      height: 60,\r\n      from: { opacity: 0, height: 120 }\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    try {\r\n      await insertionSort(array, setI, setJ, setKeyInx, DEFAULT_STEP_TIME)\r\n    } catch (error) {\r\n      // Display error message\r\n    }\r\n    if (store.getState().algorithm === ALGOS.INSERTION_SORT) {\r\n      setI(null)\r\n      setJ(null)\r\n      setKeyInx(null)\r\n      setStarted(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m='1rem'\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight='bold' flexWrap='wrap'>\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n      <Box hidden={i === null && j === null && keyIdx === null}>\r\n        <Divider />\r\n        <Flex>\r\n          <Text fontSize='4xl'>Iteration data</Text>\r\n        </Flex>\r\n      </Box>\r\n      <ArrayIterationData index={i} color={saltBox} array={array} text='i' />\r\n      <ArrayIterationData index={j} color={saltBox} array={array} text='j' />\r\n      <ArrayIterationData\r\n        index={keyIdx}\r\n        color={tidal}\r\n        array={array}\r\n        text='Current Key Index'\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(InsertionSortViz)\r\n","import { DEFAULT_STEP_TIME } from 'app/const'\r\n\r\nexport const bubbleSort = async (\r\n  arr: Array<number>,\r\n  setLeft: (n: number) => void,\r\n  setRight: (n: number) => void,\r\n  setArray: (arr: Array<number>) => void,\r\n  stepSpeed: number = DEFAULT_STEP_TIME\r\n) => {\r\n  const copy = [...arr]\r\n  for (let i = 0; i < copy.length; i++) {\r\n    for (let j = 0; j < copy.length - 1 - i; j++) {\r\n      const right = copy[j + 1]\r\n      const left = copy[j]\r\n      await new Promise<void>((res) => {\r\n        setTimeout(() => {\r\n          res()\r\n        }, stepSpeed)\r\n      })\r\n      setLeft(j)\r\n      setRight(j + 1)\r\n      if (left > right) {\r\n        const x = copy[j]\r\n        copy[j] = copy[j + 1]\r\n        copy[j + 1] = x\r\n      }\r\n      setArray(copy)\r\n    }\r\n  }\r\n}\r\n","import { memo, FC, useState } from 'react'\r\nimport { useSprings } from 'react-spring'\r\nimport { Flex, Button } from '@chakra-ui/react'\r\nimport { useCustomColors } from 'app/hooks'\r\nimport { factArr } from 'app/factories'\r\nimport { ArrayAnimatedElement } from 'dump'\r\nimport { bubbleSort } from './algo'\r\n\r\nconst BubbleSortViz: FC = () => {\r\n  const [array, setArray] = useState<Array<number>>(factArr())\r\n  const [leftIndex, setLeft] = useState<number | null>(null)\r\n  const [rightIndex, setRight] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const { saltBox, persimmon, tidal } = useCustomColors()\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor:\r\n        leftIndex === index || rightIndex === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow:\r\n        index === leftIndex || index === rightIndex\r\n          ? `5px 10px ${tidal}`\r\n          : `0px 0px ${tidal}`,\r\n      opacity: 1,\r\n      height: 60,\r\n      from: { opacity: 0, height: 120 },\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    await bubbleSort(array, setLeft, setRight, setArray)\r\n    setStarted(false)\r\n    setLeft(null)\r\n    setRight(null)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m=\"1rem\"\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight=\"bold\" flexWrap=\"wrap\">\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(BubbleSortViz)\r\n","import { DEFAULT_STEP_TIME } from 'app/const'\r\nimport { produce, original } from 'immer'\r\nimport { TreeState } from './types'\r\n\r\nconst { floor } = Math\r\n\r\nexport const mergeSort = async (\r\n  array: Array<number>,\r\n  setTree: (obj: any) => void,\r\n  compareColor: string\r\n): Promise<void> => {\r\n  let mid = floor(array.length / 2)\r\n  const leftArray: Array<number> = array.slice(0, mid)\r\n  const rightArray: Array<number> = array.slice(mid)\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      prev.children = [\r\n        { name: createName(leftArray), children: [], arr: leftArray },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [leftLvl1] = prev.children\r\n      let mid = floor(leftArray.length / 2)\r\n      const leftArray2: Array<number> = leftArray.slice(0, mid)\r\n\r\n      leftLvl1.children = [\r\n        { name: createName(leftArray2), children: [], arr: leftArray2 },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(leftLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n      leftLvl2.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(leftLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n      leftLvl2.children = [\r\n        leftLvl2.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      leftLvl2.children = leftLvl2.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftLvl2.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      leftLvl2.children = []\r\n      leftLvl2.name = createName(arr)\r\n      leftLvl2.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [leftLvl1] = prev.children\r\n      const mid = floor(leftArray.length / 2)\r\n      const leftArray2: Array<number> = leftArray.slice(mid)\r\n\r\n      leftLvl1.children = [\r\n        leftLvl1.children[0],\r\n        { name: createName(leftArray2), children: [], arr: leftArray2 },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      leftRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      leftRight.children = [\r\n        leftRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      leftRightRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      leftRightRight.children = [\r\n        leftRightRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      leftRightRight.children = leftRightRight.children.map(\r\n        (obj: TreeState) => ({\r\n          ...obj,\r\n          color: compareColor,\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRightRight.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      leftRightRight.children = []\r\n      leftRightRight.name = createName(arr)\r\n      leftRightRight.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      leftRight.children = leftRight.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRight.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      leftRight.children = []\r\n      leftRight.name = createName(arr)\r\n      leftRight.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [left] = prev.children\r\n      left.children = left.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [left] = prev.children\r\n      const arr = left.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      left.children = []\r\n      left.name = createName(arr)\r\n      left.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      prev.children = [\r\n        prev.children[0],\r\n        { name: createName(rightArray), children: [], arr: rightArray },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, rightLvl1] = prev.children\r\n      const mid = floor(rightArray.length / 2)\r\n      const array: Array<number> = rightArray.slice(0, mid)\r\n\r\n      rightLvl1.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(rightLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n      rightLvl2.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(rightLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n      rightLvl2.children = [\r\n        rightLvl2.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      rightLvl2.children = rightLvl2.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightLvl2.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      rightLvl2.children = []\r\n      rightLvl2.name = createName(arr)\r\n      rightLvl2.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, rightLvl1] = prev.children\r\n      const mid = floor(rightArray.length / 2)\r\n      const array: Array<number> = rightArray.slice(mid)\r\n\r\n      rightLvl1.children = [\r\n        rightLvl1.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      rightRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      rightRight.children = [\r\n        rightRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      rightRightRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      rightRightRight.children = [\r\n        rightRightRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      rightRightRight.children = rightRightRight.children.map(\r\n        (obj: TreeState) => ({\r\n          ...obj,\r\n          color: compareColor,\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRightRight.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      rightRightRight.children = []\r\n      rightRightRight.name = createName(arr)\r\n      rightRightRight.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightright],\r\n        },\r\n      ] = prev.children\r\n      rightright.children = rightright.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightright],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightright.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      rightright.children = []\r\n      rightright.name = createName(arr)\r\n      rightright.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, right] = prev.children\r\n      right.children = right.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, right] = prev.children\r\n      const arr = right.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      right.children = []\r\n      right.name = createName(arr)\r\n      right.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      prev.children = prev.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      array = [...array].sort((a, b) => a - b)\r\n      prev.children = []\r\n      prev.name = createName(array)\r\n      prev.arr = array\r\n      prev.width = 300\r\n    })\r\n  )\r\n}\r\n\r\nconst sleep = (stepSpeed: number = DEFAULT_STEP_TIME): Promise<void> =>\r\n  new Promise<void>((res) => setTimeout(res, stepSpeed))\r\n\r\nconst createName = (arr: Array<number>): string => `[${arr.toString()}]`\r\n","import { memo, useState } from 'react'\r\nimport { useCustomColors } from 'app/hooks'\r\nimport Tree from 'react-d3-tree'\r\nimport { Button, Text } from '@chakra-ui/react'\r\nimport { mergeSort } from './algo'\r\nimport { factArr } from 'app/factories'\r\nimport styles from './MergeSortViz.module.css'\r\nimport { TreeState } from './types'\r\n\r\nconst renderForeignObjectNode = ({\r\n  nodeDatum,\r\n  fillColor,\r\n  foreignObjectProps,\r\n}: any) => {\r\n  return (\r\n    <g>\r\n      <circle r={15} style={{ fill: nodeDatum.color || fillColor }}></circle>\r\n      <foreignObject {...foreignObjectProps}>\r\n        <div style={{ width: nodeDatum.width || 90 }}>\r\n          <h3 style={{ textAlign: 'center' }}>{nodeDatum.name}</h3>\r\n        </div>\r\n      </foreignObject>\r\n    </g>\r\n  )\r\n}\r\n\r\nconst MergeSortViz = () => {\r\n  const [array] = useState<Array<number>>(factArr(10))\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const [tree, setTree] = useState<TreeState>({\r\n    name: `[${[...array].toString()}]`,\r\n    children: [],\r\n  })\r\n  const { saltBox, mulberry } = useCustomColors()\r\n\r\n  const startAlgo = async () => {\r\n    setTree({\r\n      name: `[${[...array].toString()}]`,\r\n      children: [],\r\n    })\r\n    setStarted(true)\r\n    await mergeSort(array, setTree, mulberry)\r\n    setStarted(false)\r\n  }\r\n\r\n  const foreignObjectProps = { width: 500, height: 200, x: 20 }\r\n\r\n  return (\r\n    <div style={{ width: '100vw', height: '100vh' }}>\r\n      <Button onClick={startAlgo} isLoading={started}>\r\n        START!\r\n      </Button>\r\n      <Text fontSize=\"md\">Sorting [{array.toString()}]</Text>\r\n      <Tree\r\n        translate={{ x: window.innerWidth / 4, y: 20 }}\r\n        data={tree}\r\n        renderCustomNodeElement={(rd3tProps) =>\r\n          renderForeignObjectNode({\r\n            ...rd3tProps,\r\n            fillColor: saltBox,\r\n            foreignObjectProps,\r\n          })\r\n        }\r\n        pathClassFunc={() => styles.node__path}\r\n        orientation=\"vertical\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(MergeSortViz)\r\n","import { ALGOS } from 'app/const'\r\nimport { NamedExoticComponent } from 'react'\r\nimport { SelectionSortViz, BubbleSortViz, MergeSortViz,insertionSort } from './VizComponent'\r\n\r\nconst map: Record<string, NamedExoticComponent> = Object.freeze({\r\n  [ALGOS.SELECTION_SORT]: SelectionSortViz,\r\n  [ALGOS.BUBBLE_SORT]: BubbleSortViz,\r\n  [ALGOS.MERGE_SORT]: MergeSortViz,\r\n  [ALGOS.INSERTION_SORT]: insertionSort,\r\n})\r\n\r\nexport default map\r\n","import { memo, FC } from 'react'\r\nimport { ALGOS } from 'app/const'\r\nimport { useAppSelector } from 'app/hooks'\r\nimport { Box } from '@chakra-ui/react'\r\nimport { selectSelectedAlgo } from 'app/selectors'\r\nimport vizMap from './vizMap'\r\n\r\nconst AlgorithmViz: FC = () => {\r\n  const selected: ALGOS | null = useAppSelector(selectSelectedAlgo)\r\n  if (selected === null || !vizMap[selected]) {\r\n    return null\r\n  }\r\n\r\n  const VIZ = vizMap[selected]\r\n\r\n  return (\r\n    <Box m=\"1rem\">\r\n      <VIZ />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(AlgorithmViz)\r\n","import { extendTheme, ThemeConfig, Theme } from '@chakra-ui/react'\r\nimport { AppColors } from 'app/const'\r\n\r\nconst config: ThemeConfig = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n\r\nconst theme: Theme = extendTheme({\r\n  config,\r\n  colors: {\r\n    saltBox: '#705E78',\r\n    mulberry: '#BF4594',\r\n    persimmon: '#FF665A',\r\n    tidal: '#F3FEB0',\r\n  } as AppColors,\r\n})\r\n\r\nexport default theme\r\n","import { FC } from 'react'\r\nimport { ChakraProvider, Box, Flex } from '@chakra-ui/react'\r\nimport { AlgorithmSelector, AlgorithmViz } from 'containers'\r\nimport { AppHeader } from 'dump'\r\nimport theme from './theme'\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <AppHeader />\r\n      <Flex height=\"100vh\" flexDir={['column', 'column', 'row', 'row']}>\r\n        <Box h=\"100%\" w={['100%', '100%', '25%', '25%']} p=\".5rem\">\r\n          <AlgorithmSelector />\r\n        </Box>\r\n        <Box h=\"100%\" w={['100%', '100%', '75%', '75%']}>\r\n          <AlgorithmViz />\r\n        </Box>\r\n      </Flex>\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}