{"version":3,"sources":["containers/AlgorithmViz/VizComponent/MergeSortViz/MergeSortViz.module.css","app/const/const.ts","app/hooks/reduxHooks.ts","app/hooks/useCustomColors.ts","app/hooks/useIsSmallScreen.ts","app/hooks/useSpringBoxHeight.ts","app/selectors.ts","containers/AlgorithmSelector/slice.ts","containers/AlgorithmSelector/AlgorithmSelector.tsx","app/factories/array.ts","app/store.ts","containers/AlgorithmViz/VizComponent/SelectionSortViz/algo.ts","dump/AppHeader/AppHeader.tsx","dump/CenteredFlexBox/CenteredFlexBox.tsx","dump/ArrayAnimatedElement/ArrayAnimatedElement.tsx","dump/ArrayIterationData/ArrayIterationData.tsx","containers/AlgorithmViz/VizComponent/SelectionSortViz/SelectionSortViz.tsx","containers/AlgorithmViz/VizComponent/InsertionSortViz/algo.ts","containers/AlgorithmViz/VizComponent/InsertionSortViz/InsertionSortViz.tsx","containers/AlgorithmViz/VizComponent/BubbleSortViz/algo.ts","containers/AlgorithmViz/VizComponent/BubbleSortViz/BubbleSortViz.tsx","containers/AlgorithmViz/VizComponent/MergeSortViz/algo.ts","containers/AlgorithmViz/VizComponent/MergeSortViz/MergeSortViz.tsx","containers/AlgorithmViz/vizMap.ts","containers/AlgorithmViz/AlgorithmViz.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ALGOS","useAppSelector","useSelector","useCustomColors","useTheme","colors","saltBox","persimmon","tidal","mulberry","blueMarguerite","useIsSmallScreen","useMediaQuery","useSpringBoxHeight","DEFAULT_STEP_TIME","selectSelectedAlgo","algorithm","slice","createSlice","name","initialState","reducers","selectAlgorithm","_","payload","actions","keys","Object","AlgorithmSelector","dispatch","useDispatch","selected","isSmallScreen","map","algo","size","disabled","colorScheme","borderTopWidth","borderBottomWidth","borderStyle","borderColor","borderTopStyle","w","h","p","m","textOverflow","whiteSpace","onClick","bg","fontSize","color","startCase","toLowerCase","memo","factArr","length","Array","from","random","store","configureStore","reducer","AlgorithmReducer","selectionSort","arr","setI","setJ","setMinIdx","setArray","a","stepSpeed","copy","i","minIdx","j","Promise","res","rej","setTimeout","getState","SELECTION_SORT","Error","AppHeader","theme","as","flex","mb","padding","purple","align","variant","aria-label","icon","Sun","CenteredFlexBox","styled","Flex","defaultProps","justifyContent","alignItems","display","ArrayAnimatedElement","animated","textAlign","margin","ArrayIterationData","index","array","text","hidden","mr","SelectionSortViz","useState","started","setStarted","boxHeight","springs","useSprings","backgroundColor","width","boxShadow","opacity","height","startAlgo","isLoading","fontWeight","flexWrap","props","style","insertionSort","setKey","key","INSERTION_SORT","InsertionSortViz","keyIdx","setKeyInx","bubbleSort","setLeft","setRight","right","left","x","BubbleSortViz","leftIndex","rightIndex","floor","Math","mergeSort","setTree","compareColor","mid","leftArray","rightArray","produce","prev","children","createName","sleep","leftLvl1","leftArray2","leftLvl2","original","obj","sort","b","leftRight","leftRightRight","rightLvl1","rightLvl2","rightRight","rightRightRight","rightright","toString","MergeSortViz","tree","foreignObjectProps","translate","window","innerWidth","y","data","renderCustomNodeElement","rd3tProps","nodeDatum","fillColor","r","fill","renderForeignObjectNode","pathClassFunc","styles","node__path","orientation","freeze","BUBBLE_SORT","MERGE_SORT","AlgorithmViz","vizMap","VIZ","extendTheme","config","initialColorMode","useSystemColorMode","App","flexDir","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef2b9aa8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"node__root\":\"MergeSortViz_node__root__2Sd86\",\"node__branch\":\"MergeSortViz_node__branch__uRYqa\",\"node__leaf\":\"MergeSortViz_node__leaf__1ZJAp\",\"node__path\":\"MergeSortViz_node__path__3kCC3\",\"colors\":\"MergeSortViz_colors__1y244\"};","import { Colors } from '@chakra-ui/react'\r\n\r\nexport enum ALGOS {\r\n  SELECTION_SORT = 'SELECTION_SORT',\r\n  BUBBLE_SORT = 'BUBBLE_SORT',\r\n  INSERTION_SORT = 'INSERTION_SORT',\r\n  MERGE_SORT = 'MERGE_SORT',\r\n}\r\n\r\nexport const DEFAULT_STEP_TIME = 1000\r\n\r\nexport interface AppColors extends Colors {\r\n  [key: string]: string\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import { useTheme, Theme } from '@chakra-ui/react'\r\nimport { AppColors } from 'app/const'\r\n\r\nexport const useCustomColors = () => {\r\n  const { colors }: Theme = useTheme()\r\n  const { saltBox, persimmon, tidal, mulberry, blueMarguerite } = colors as unknown as AppColors\r\n  return { saltBox, persimmon, tidal, mulberry, blueMarguerite }\r\n}\r\n","import { useMediaQuery } from '@chakra-ui/react'\r\n\r\nexport const useIsSmallScreen = () => {\r\n  const [isSmallScreen] = useMediaQuery('(max-width: 600px)')\r\n  return isSmallScreen\r\n}\r\n","import { useIsSmallScreen } from './useIsSmallScreen'\r\n\r\nexport const useSpringBoxHeight = (): number => (useIsSmallScreen() ? 30 : 60)\r\n","import { RootState } from './store'\r\nimport { ALGOS } from 'app/const'\r\n\r\nexport const selectSelectedAlgo = ({ algorithm }: RootState): ALGOS | null =>\r\n  algorithm\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ALGOS } from 'app/const'\r\n\r\ntype ALGOState = ALGOS | null\r\n\r\nconst slice = createSlice({\r\n  name: 'algorithm',\r\n  initialState: null as ALGOState,\r\n  reducers: {\r\n    selectAlgorithm(_, { payload }: PayloadAction<ALGOS>) {\r\n      return payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { selectAlgorithm } = slice.actions\r\n\r\nexport default slice.reducer\r\n","import { FC, memo } from 'react'\r\nimport { Text, Button } from '@chakra-ui/react'\r\nimport {\r\n  useAppSelector,\r\n  useAppDispatch,\r\n  useCustomColors,\r\n  useIsSmallScreen,\r\n} from 'app/hooks'\r\nimport { ALGOS } from 'app/const'\r\nimport { selectSelectedAlgo } from 'app/selectors'\r\nimport { startCase } from 'lodash'\r\nimport { selectAlgorithm } from './slice'\r\n\r\nconst keys = Object.keys(ALGOS)\r\n\r\nconst AlgorithmSelector: FC = () => {\r\n  const dispatch = useAppDispatch()\r\n  const selected: ALGOS | null = useAppSelector(selectSelectedAlgo)\r\n  const { blueMarguerite } = useCustomColors()\r\n  const isSmallScreen = useIsSmallScreen()\r\n\r\n  return (\r\n    <section>\r\n      {keys.map((algo: string) => (\r\n        <Button\r\n          key={algo}\r\n          size=\"sm\"\r\n          disabled={selected === algo}\r\n          colorScheme=\"purple\"\r\n          borderTopWidth={selected === algo ? (isSmallScreen ? 2 : 5) : 0}\r\n          borderBottomWidth={selected === algo ? 0 : isSmallScreen ? 2 : 5}\r\n          borderStyle=\"solid\"\r\n          borderColor={blueMarguerite}\r\n          borderTopStyle=\"solid\"\r\n          w={['25%', '25%', '25%', '25%']}\r\n          h={10}\r\n          p={[0, 10, 10, 10]}\r\n          m={[1, 5, 5, 5]}\r\n          textOverflow=\"clip\"\r\n          whiteSpace=\"break-spaces\"\r\n          onClick={() =>\r\n            dispatch(selectAlgorithm((ALGOS as any)[algo] as ALGOS))\r\n          }\r\n          bg={selected === algo ? 'purple.900' : 'purple.700'}\r\n        >\r\n          <Text fontSize=\"xs\" color=\"white\" textOverflow=\"clip\">\r\n            {startCase(algo.toLowerCase())}\r\n          </Text>\r\n        </Button>\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default memo(AlgorithmSelector)\r\n","import { random } from 'lodash'\r\n\r\nexport const factArr = (length = 10) =>\r\n  Array.from({ length }).map(() => random(-10, 100))\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\r\nimport { AlgorithmReducer } from 'containers'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    algorithm: AlgorithmReducer,\r\n  },\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n","import { store } from 'app/store'\r\nimport { DEFAULT_STEP_TIME,ALGOS } from 'app/const'\r\n\r\nexport const selectionSort = async (\r\n  arr: Array<number>,\r\n  setI: (n: number) => void,\r\n  setJ: (n: number) => void,\r\n  setMinIdx: (n: number) => void,\r\n  setArray: (arr: Array<number>) => void,\r\n  stepSpeed: number = DEFAULT_STEP_TIME\r\n) => {\r\n  const copy = [...arr]\r\n  let minIdx: any\r\n  for (let i = 0; i < copy.length; i++) {\r\n    minIdx = i\r\n    for (let j = i + 1; j < arr.length; j++) {\r\n      try {\r\n        await new Promise<void>((res, rej) =>\r\n          setTimeout(() => {\r\n            if (store.getState().algorithm !== ALGOS.SELECTION_SORT) {\r\n              rej()\r\n            } else {\r\n              res()\r\n            }\r\n          }, stepSpeed)\r\n        )\r\n      } catch {\r\n        throw new Error('Nothing')\r\n      }\r\n      setI(i)\r\n      setJ(j)\r\n      setMinIdx(minIdx)\r\n      if (copy[j] < copy[minIdx]) {\r\n        minIdx = j\r\n      }\r\n    }\r\n    ;[copy[minIdx], copy[i]] = [copy[i], copy[minIdx]]\r\n    setArray(copy)\r\n  }\r\n}\r\n","import { FC, memo } from 'react'\r\nimport { Flex, Heading, useTheme, Theme, IconButton } from '@chakra-ui/react'\r\nimport { SunIcon } from '@chakra-ui/icons'\r\n\r\nconst AppHeader: FC = () => {\r\n  const theme: Theme = useTheme()\r\n\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      flex=\"1\"\r\n      mb={4}\r\n      padding=\"1rem\"\r\n      bg={theme.colors.purple[700]}\r\n      color=\"white\"\r\n    >\r\n      <Flex align=\"center\">\r\n        <Heading size=\"sm\">TODO</Heading>\r\n      </Flex>\r\n      <Flex flex={1} />\r\n      <IconButton\r\n        variant=\"outline\"\r\n        aria-label=\"Theme changer\"\r\n        fontSize=\"20px\"\r\n        icon={<SunIcon />}\r\n      />\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(AppHeader)\r\n","import { memo } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Flex } from '@chakra-ui/react'\r\n\r\nconst CenteredFlexBox = styled(Flex)``\r\n\r\nCenteredFlexBox.defaultProps = {\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  display: 'flex',\r\n}\r\n\r\nexport default memo(CenteredFlexBox)\r\n","import { animated } from 'react-spring'\r\nimport styled from '@emotion/styled'\r\nimport { Flex } from '@chakra-ui/react'\r\n\r\nconst ArrayAnimatedElement = styled(animated(Flex))`\r\n  cursor: pointer;\r\n`\r\n\r\nArrayAnimatedElement.defaultProps = {\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  display: 'flex',\r\n  textAlign: 'center',\r\n  margin: '1rem',\r\n  fontSize: [20, 40, 40, 40],\r\n}\r\n\r\nexport default ArrayAnimatedElement\r\n","import { memo } from 'react'\r\nimport { Flex, Tag, Kbd } from '@chakra-ui/react'\r\nimport { CenteredFlexBox } from 'dump'\r\n\r\ninterface Props {\r\n  index: number | null\r\n  array: Array<number>\r\n  color: string\r\n  text: string\r\n}\r\n\r\nconst ArrayIterationData = ({ index, array, color, text }: Props) => {\r\n  return (\r\n    <Flex m=\"1rem\" hidden={index === null}>\r\n      <CenteredFlexBox>\r\n        <Tag size=\"sm\" variant=\"solid\" bg={color} mr=\"2\" />\r\n        <Kbd>{text}</Kbd> = <Kbd>{index}</Kbd>\r\n        <Kbd m=\"2\">value</Kbd> =\r\n        <Kbd m=\"2\">[{index === null ? '' : array[index]}]</Kbd>\r\n      </CenteredFlexBox>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(ArrayIterationData)\r\n","import { memo, FC, useState } from 'react'\r\nimport { Flex, Button, Box, Divider, Text } from '@chakra-ui/react'\r\nimport { useSprings } from 'react-spring'\r\nimport { factArr } from 'app/factories'\r\nimport { useCustomColors, useSpringBoxHeight } from 'app/hooks'\r\nimport { selectionSort } from './algo'\r\nimport { DEFAULT_STEP_TIME, ALGOS } from 'app/const'\r\nimport { ArrayAnimatedElement, ArrayIterationData } from 'dump'\r\n\r\nimport { store } from 'app/store'\r\n\r\nconst SelectionSortViz: FC = () => {\r\n  const [array, setArray] = useState<Array<number>>(factArr())\r\n  const [i, setI] = useState<number | null>(null)\r\n  const [j, setJ] = useState<number | null>(null)\r\n  const [minIdx, setMinIdx] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const { saltBox, persimmon, tidal } = useCustomColors()\r\n  const boxHeight: number = useSpringBoxHeight()\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor: i === index || j === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow: index === minIdx ? `5px 10px ${tidal}` : `0px 0px ${tidal}`,\r\n      opacity: i === index ? 0.5 : 1,\r\n      height: boxHeight,\r\n      from: { opacity: 0, height: 12 },\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    try {\r\n      await selectionSort(\r\n        array,\r\n        setI,\r\n        setJ,\r\n        setMinIdx,\r\n        setArray,\r\n        DEFAULT_STEP_TIME\r\n      )\r\n    } catch (error) {\r\n      // Display error message\r\n    }\r\n    if (store.getState().algorithm === ALGOS.SELECTION_SORT) {\r\n      setI(null)\r\n      setJ(null)\r\n      setMinIdx(null)\r\n      setStarted(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m=\"1rem\"\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight=\"bold\" flexWrap=\"wrap\">\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n      <Box hidden={i === null && j === null && minIdx === null}>\r\n        <Divider />\r\n        <Flex>\r\n          <Text fontSize=\"4xl\">Iteration data</Text>\r\n        </Flex>\r\n      </Box>\r\n      <ArrayIterationData index={i} color={saltBox} array={array} text=\"i\" />\r\n      <ArrayIterationData index={j} color={saltBox} array={array} text=\"j\" />\r\n      <ArrayIterationData\r\n        index={minIdx}\r\n        color={tidal}\r\n        array={array}\r\n        text=\"current min index\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(SelectionSortViz)\r\n","import { store } from 'app/store'\r\nimport { ALGOS } from 'app/const'\r\n\r\nexport const insertionSort = async (\r\n  arr: Array<number>,\r\n  setI: (n: number) => void,\r\n  setJ: (n: number) => void,\r\n  setKey: (n: number) => void,\r\n  stepSpeed: number = 1000\r\n) => {\r\n  let key: any\r\n  let j: any\r\n  for (let i = 1; i < arr.length; i++) {\r\n    key = arr[i]\r\n    setKey(i)\r\n    setI(i)\r\n    j = i - 1\r\n    setJ(j)\r\n    while (j >= 0 && arr[j] > key) {\r\n      try {\r\n        await new Promise<void>((res, rej) =>\r\n          setTimeout(() => {\r\n            if (store.getState().algorithm !== ALGOS.INSERTION_SORT) {\r\n              rej()\r\n            } else {\r\n              res()\r\n            }\r\n          }, stepSpeed)\r\n        )\r\n      } catch {\r\n        throw new Error('Nothing')\r\n      }\r\n      arr[j + 1] = arr[j]\r\n      j--\r\n      setJ(j)\r\n      arr[j + 1] = key\r\n      setKey(j + 1)\r\n    }\r\n  }\r\n  return arr\r\n}\r\n","import { memo, FC, useState } from 'react'\r\nimport {\r\n  Flex,\r\n  Button,\r\n  Box,\r\n  Theme,\r\n  useTheme,\r\n  Divider,\r\n  Text,\r\n} from '@chakra-ui/react'\r\nimport { useSprings } from 'react-spring'\r\nimport { random } from 'lodash'\r\nimport { insertionSort } from './algo'\r\nimport { DEFAULT_STEP_TIME, AppColors, ALGOS } from 'app/const'\r\nimport { useSpringBoxHeight } from 'app/hooks'\r\nimport { ArrayAnimatedElement, ArrayIterationData } from 'dump'\r\nimport { store } from 'app/store'\r\n\r\nconst array = Array.from({ length: 10 }).map(() => random(0, 100))\r\n\r\nconst InsertionSortViz: FC = () => {\r\n  const [i, setI] = useState<number | null>(null)\r\n  const [j, setJ] = useState<number | null>(null)\r\n  const [keyIdx, setKeyInx] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const boxHeight: number = useSpringBoxHeight()\r\n\r\n  const { colors }: Theme = useTheme()\r\n  const { saltBox, persimmon, tidal } = colors as unknown as AppColors\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor: i === index || j === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow: index === keyIdx ? `5px 10px ${tidal}` : `0px 0px ${tidal}`,\r\n      opacity: i === index ? 0.5 : 1,\r\n      height: boxHeight,\r\n      from: { opacity: 0, height: 12 },\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    try {\r\n      await insertionSort(array, setI, setJ, setKeyInx, DEFAULT_STEP_TIME)\r\n    } catch (error) {\r\n      // Display error message\r\n    }\r\n    if (store.getState().algorithm === ALGOS.INSERTION_SORT) {\r\n      setI(null)\r\n      setJ(null)\r\n      setKeyInx(null)\r\n      setStarted(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m=\"1rem\"\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight=\"bold\" flexWrap=\"wrap\">\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n      <Box hidden={i === null && j === null && keyIdx === null}>\r\n        <Divider />\r\n        <Flex>\r\n          <Text fontSize=\"4xl\">Iteration data</Text>\r\n        </Flex>\r\n      </Box>\r\n      <ArrayIterationData index={i} color={saltBox} array={array} text=\"i\" />\r\n      <ArrayIterationData index={j} color={saltBox} array={array} text=\"j\" />\r\n      <ArrayIterationData\r\n        index={keyIdx}\r\n        color={tidal}\r\n        array={array}\r\n        text=\"Current Key Index\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(InsertionSortViz)\r\n","import { DEFAULT_STEP_TIME } from 'app/const'\r\n\r\nexport const bubbleSort = async (\r\n  arr: Array<number>,\r\n  setLeft: (n: number) => void,\r\n  setRight: (n: number) => void,\r\n  setArray: (arr: Array<number>) => void,\r\n  stepSpeed: number = DEFAULT_STEP_TIME\r\n) => {\r\n  const copy = [...arr]\r\n  for (let i = 0; i < copy.length; i++) {\r\n    for (let j = 0; j < copy.length - 1 - i; j++) {\r\n      const right = copy[j + 1]\r\n      const left = copy[j]\r\n      await new Promise<void>((res) => {\r\n        setTimeout(() => {\r\n          res()\r\n        }, stepSpeed)\r\n      })\r\n      setLeft(j)\r\n      setRight(j + 1)\r\n      if (left > right) {\r\n        const x = copy[j]\r\n        copy[j] = copy[j + 1]\r\n        copy[j + 1] = x\r\n      }\r\n      setArray(copy)\r\n    }\r\n  }\r\n}\r\n","import { memo, FC, useState } from 'react'\r\nimport { useSprings } from 'react-spring'\r\nimport { Flex, Button } from '@chakra-ui/react'\r\nimport { useCustomColors, useSpringBoxHeight } from 'app/hooks'\r\nimport { factArr } from 'app/factories'\r\nimport { ArrayAnimatedElement } from 'dump'\r\nimport { bubbleSort } from './algo'\r\n\r\nconst BubbleSortViz: FC = () => {\r\n  const [array, setArray] = useState<Array<number>>(factArr())\r\n  const [leftIndex, setLeft] = useState<number | null>(null)\r\n  const [rightIndex, setRight] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const { saltBox, persimmon, tidal } = useCustomColors()\r\n  const boxHeight = useSpringBoxHeight()\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor:\r\n        leftIndex === index || rightIndex === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow:\r\n        index === leftIndex || index === rightIndex\r\n          ? `5px 10px ${tidal}`\r\n          : `0px 0px ${tidal}`,\r\n      opacity: 1,\r\n      height: boxHeight,\r\n      from: { opacity: 0, height: 12 },\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    await bubbleSort(array, setLeft, setRight, setArray)\r\n    setStarted(false)\r\n    setLeft(null)\r\n    setRight(null)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m=\"1rem\"\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight=\"bold\" flexWrap=\"wrap\">\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(BubbleSortViz)\r\n","import { DEFAULT_STEP_TIME } from 'app/const'\r\nimport { produce, original } from 'immer'\r\nimport { TreeState } from './types'\r\n\r\nconst { floor } = Math\r\n\r\nexport const mergeSort = async (\r\n  array: Array<number>,\r\n  setTree: (obj: any) => void,\r\n  compareColor: string\r\n): Promise<void> => {\r\n  let mid = floor(array.length / 2)\r\n  const leftArray: Array<number> = array.slice(0, mid)\r\n  const rightArray: Array<number> = array.slice(mid)\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      prev.children = [\r\n        { name: createName(leftArray), children: [], arr: leftArray },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [leftLvl1] = prev.children\r\n      let mid = floor(leftArray.length / 2)\r\n      const leftArray2: Array<number> = leftArray.slice(0, mid)\r\n\r\n      leftLvl1.children = [\r\n        { name: createName(leftArray2), children: [], arr: leftArray2 },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(leftLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n      leftLvl2.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(leftLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n      leftLvl2.children = [\r\n        leftLvl2.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      leftLvl2.children = leftLvl2.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [leftLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftLvl2.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      leftLvl2.children = []\r\n      leftLvl2.name = createName(arr)\r\n      leftLvl2.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [leftLvl1] = prev.children\r\n      const mid = floor(leftArray.length / 2)\r\n      const leftArray2: Array<number> = leftArray.slice(mid)\r\n\r\n      leftLvl1.children = [\r\n        leftLvl1.children[0],\r\n        { name: createName(leftArray2), children: [], arr: leftArray2 },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      leftRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      leftRight.children = [\r\n        leftRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      leftRightRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      leftRightRight.children = [\r\n        leftRightRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      leftRightRight.children = leftRightRight.children.map(\r\n        (obj: TreeState) => ({\r\n          ...obj,\r\n          color: compareColor,\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, leftRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRightRight.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      leftRightRight.children = []\r\n      leftRightRight.name = createName(arr)\r\n      leftRightRight.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      leftRight.children = leftRight.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        {\r\n          children: [, leftRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = leftRight.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      leftRight.children = []\r\n      leftRight.name = createName(arr)\r\n      leftRight.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [left] = prev.children\r\n      left.children = left.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [left] = prev.children\r\n      const arr = left.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      left.children = []\r\n      left.name = createName(arr)\r\n      left.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      prev.children = [\r\n        prev.children[0],\r\n        { name: createName(rightArray), children: [], arr: rightArray },\r\n      ]\r\n    })\r\n  )\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, rightLvl1] = prev.children\r\n      const mid = floor(rightArray.length / 2)\r\n      const array: Array<number> = rightArray.slice(0, mid)\r\n\r\n      rightLvl1.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(rightLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n      rightLvl2.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = original(rightLvl2.arr) || []\r\n      let mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n      rightLvl2.children = [\r\n        rightLvl2.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      rightLvl2.children = rightLvl2.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [rightLvl2],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightLvl2.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      rightLvl2.children = []\r\n      rightLvl2.name = createName(arr)\r\n      rightLvl2.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, rightLvl1] = prev.children\r\n      const mid = floor(rightArray.length / 2)\r\n      const array: Array<number> = rightArray.slice(mid)\r\n\r\n      rightLvl1.children = [\r\n        rightLvl1.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      rightRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightRight],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      rightRight.children = [\r\n        rightRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(0, mid)\r\n\r\n      rightRightRight.children = [\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRightRight.arr?.slice() || []\r\n      const mid = floor(arr.length / 2)\r\n      const array: Array<number> = arr.slice(mid)\r\n\r\n      rightRightRight.children = [\r\n        rightRightRight.children[0],\r\n        { name: createName(array), children: [], arr: array },\r\n      ]\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      rightRightRight.children = rightRightRight.children.map(\r\n        (obj: TreeState) => ({\r\n          ...obj,\r\n          color: compareColor,\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [\r\n            ,\r\n            {\r\n              children: [, rightRightRight],\r\n            },\r\n          ],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightRightRight.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      rightRightRight.children = []\r\n      rightRightRight.name = createName(arr)\r\n      rightRightRight.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightright],\r\n        },\r\n      ] = prev.children\r\n      rightright.children = rightright.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [\r\n        ,\r\n        {\r\n          children: [, rightright],\r\n        },\r\n      ] = prev.children\r\n      const arr = rightright.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      rightright.children = []\r\n      rightright.name = createName(arr)\r\n      rightright.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, right] = prev.children\r\n      right.children = right.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      const [, right] = prev.children\r\n      const arr = right.arr?.slice() || []\r\n      arr.sort((a, b) => a - b)\r\n      right.children = []\r\n      right.name = createName(arr)\r\n      right.arr = arr\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      prev.children = prev.children.map((obj: TreeState) => ({\r\n        ...obj,\r\n        color: compareColor,\r\n      }))\r\n    })\r\n  )\r\n\r\n  await sleep()\r\n  setTree(\r\n    produce((prev: TreeState) => {\r\n      array = [...array].sort((a, b) => a - b)\r\n      prev.children = []\r\n      prev.name = createName(array)\r\n      prev.arr = array\r\n      prev.width = 300\r\n    })\r\n  )\r\n}\r\n\r\nconst sleep = (stepSpeed: number = DEFAULT_STEP_TIME): Promise<void> =>\r\n  new Promise<void>((res) => setTimeout(res, stepSpeed))\r\n\r\nconst createName = (arr: Array<number>): string => `[${arr.toString()}]`\r\n","import { memo, useState } from 'react'\r\nimport { useCustomColors } from 'app/hooks'\r\nimport Tree from 'react-d3-tree'\r\nimport { Button, Text } from '@chakra-ui/react'\r\nimport { mergeSort } from './algo'\r\nimport { factArr } from 'app/factories'\r\nimport styles from './MergeSortViz.module.css'\r\nimport { TreeState } from './types'\r\n\r\nconst renderForeignObjectNode = ({\r\n  nodeDatum,\r\n  fillColor,\r\n  foreignObjectProps,\r\n}: any) => {\r\n  return (\r\n    <g>\r\n      <circle r={15} style={{ fill: nodeDatum.color || fillColor }}></circle>\r\n      <foreignObject {...foreignObjectProps}>\r\n        <div style={{ width: nodeDatum.width || 90 }}>\r\n          <h3 style={{ textAlign: 'center' }}>{nodeDatum.name}</h3>\r\n        </div>\r\n      </foreignObject>\r\n    </g>\r\n  )\r\n}\r\n\r\nconst MergeSortViz = () => {\r\n  const [array] = useState<Array<number>>(factArr(10))\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const [tree, setTree] = useState<TreeState>({\r\n    name: `[${[...array].toString()}]`,\r\n    children: [],\r\n  })\r\n  const { saltBox, mulberry } = useCustomColors()\r\n\r\n  const startAlgo = async () => {\r\n    setTree({\r\n      name: `[${[...array].toString()}]`,\r\n      children: [],\r\n    })\r\n    setStarted(true)\r\n    await mergeSort(array, setTree, mulberry)\r\n    setStarted(false)\r\n  }\r\n\r\n  const foreignObjectProps = { width: 500, height: 200, x: 20 }\r\n\r\n  return (\r\n    <div style={{ width: '100vw', height: '100vh' }}>\r\n      <Button onClick={startAlgo} isLoading={started}>\r\n        START!\r\n      </Button>\r\n      <Text fontSize=\"md\">Sorting [{array.toString()}]</Text>\r\n      <Tree\r\n        translate={{ x: window.innerWidth / 4, y: 20 }}\r\n        data={tree}\r\n        renderCustomNodeElement={(rd3tProps) =>\r\n          renderForeignObjectNode({\r\n            ...rd3tProps,\r\n            fillColor: saltBox,\r\n            foreignObjectProps,\r\n          })\r\n        }\r\n        pathClassFunc={() => styles.node__path}\r\n        orientation=\"vertical\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(MergeSortViz)\r\n","import { ALGOS } from 'app/const'\r\nimport { NamedExoticComponent } from 'react'\r\nimport { SelectionSortViz, BubbleSortViz, MergeSortViz,insertionSort } from './VizComponent'\r\n\r\nconst map: Record<string, NamedExoticComponent> = Object.freeze({\r\n  [ALGOS.SELECTION_SORT]: SelectionSortViz,\r\n  [ALGOS.BUBBLE_SORT]: BubbleSortViz,\r\n  [ALGOS.MERGE_SORT]: MergeSortViz,\r\n  [ALGOS.INSERTION_SORT]: insertionSort,\r\n})\r\n\r\nexport default map\r\n","import { memo, FC } from 'react'\r\nimport { ALGOS } from 'app/const'\r\nimport { useAppSelector } from 'app/hooks'\r\nimport { Box } from '@chakra-ui/react'\r\nimport { selectSelectedAlgo } from 'app/selectors'\r\nimport vizMap from './vizMap'\r\n\r\nconst AlgorithmViz: FC = () => {\r\n  const selected: ALGOS | null = useAppSelector(selectSelectedAlgo)\r\n  if (selected === null || !vizMap[selected]) {\r\n    return null\r\n  }\r\n\r\n  const VIZ = vizMap[selected]\r\n\r\n  return (\r\n    <Box m=\"1rem\">\r\n      <VIZ />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(AlgorithmViz)\r\n","import { extendTheme, ThemeConfig, Theme } from '@chakra-ui/react'\r\nimport { AppColors } from 'app/const'\r\n\r\nconst config: ThemeConfig = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n\r\nconst theme: Theme = extendTheme({\r\n  config,\r\n  colors: {\r\n    saltBox: '#705E78',\r\n    mulberry: '#BF4594',\r\n    persimmon: '#553c9a',\r\n    tidal: '#F3FEB0',\r\n    blueMarguerite: '#FFD432',\r\n  } as AppColors,\r\n})\r\n\r\nexport default theme\r\n","import { FC } from 'react'\r\nimport { ChakraProvider, Box, Flex } from '@chakra-ui/react'\r\nimport { AlgorithmSelector, AlgorithmViz } from 'containers'\r\nimport { AppHeader } from 'dump'\r\nimport theme from './theme'\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <AppHeader />\r\n      <Flex height=\"100vh\" flexDir={['column', 'column', 'row', 'row']}>\r\n        <Box\r\n          h={['auto', 'auto', '25%', '25%']}\r\n          w={['100%', '100%', '25%', '25%']}\r\n          p=\".5rem\"\r\n        >\r\n          <AlgorithmSelector />\r\n        </Box>\r\n        <Box h=\"100%\" w={['100%', '100%', '75%', '75%']}>\r\n          <AlgorithmViz />\r\n        </Box>\r\n      </Flex>\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}