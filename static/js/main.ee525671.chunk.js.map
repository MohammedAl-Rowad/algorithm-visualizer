{"version":3,"sources":["containers/AlgorithmViz/VizComponent/MergeSortViz/MergeSortViz.module.css","app/const/const.ts","app/hooks/reduxHooks.ts","app/hooks/useCustomColors.ts","app/selectors.ts","containers/AlgorithmSelector/slice.ts","containers/AlgorithmSelector/AlgorithmSelector.tsx","app/factories/array.ts","app/store.ts","containers/AlgorithmViz/VizComponent/SelectionSortViz/algo.ts","dump/AppHeader/AppHeader.tsx","dump/CenteredFlexBox/CenteredFlexBox.tsx","dump/ArrayAnimatedElement/ArrayAnimatedElement.tsx","dump/ArrayIterationData/ArrayIterationData.tsx","containers/AlgorithmViz/VizComponent/SelectionSortViz/SelectionSortViz.tsx","containers/AlgorithmViz/VizComponent/InsertionSortViz/algo.ts","containers/AlgorithmViz/VizComponent/InsertionSortViz/InsertionSortViz.tsx","containers/AlgorithmViz/VizComponent/BubbleSortViz/algo.ts","containers/AlgorithmViz/VizComponent/BubbleSortViz/BubbleSortViz.tsx","containers/AlgorithmViz/VizComponent/MergeSortViz/algo.ts","containers/AlgorithmViz/VizComponent/MergeSortViz/MergeSortViz.tsx","containers/AlgorithmViz/vizMap.ts","containers/AlgorithmViz/AlgorithmViz.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ALGOS","useAppSelector","useSelector","useCustomColors","useTheme","colors","saltBox","persimmon","tidal","DEFAULT_STEP_TIME","selectSelectedAlgo","algorithm","slice","createSlice","name","initialState","reducers","selectAlgorithm","_","payload","actions","keys","Object","AlgorithmSelector","dispatch","useDispatch","selected","map","algo","size","disabled","colorScheme","borderRadius","h","p","m","onClick","width","bg","w","color","startCase","memo","factArr","length","Array","from","random","store","configureStore","reducer","AlgorithmReducer","selectionSort","arr","setI","setJ","setMinIdx","setArray","a","stepSpeed","copy","i","minIdx","j","Promise","res","rej","setTimeout","getState","SELECTION_SORT","Error","AppHeader","theme","as","flex","mb","padding","purple","align","variant","aria-label","fontSize","icon","Sun","CenteredFlexBox","styled","Flex","defaultProps","justifyContent","alignItems","display","ArrayAnimatedElement","animated","textAlign","height","margin","ArrayIterationData","index","array","text","hidden","mr","SelectionSortViz","useState","started","setStarted","springs","useSprings","backgroundColor","boxShadow","opacity","startAlgo","isLoading","fontWeight","flexWrap","props","style","insertionSort","setKey","key","INSERTION_SORT","InsertionSortViz","keyIdx","setKeyInx","bubbleSort","setLeft","setRight","right","left","x","BubbleSortViz","leftIndex","rightIndex","mergeSort","setTree","depthLevel","leftTree","rightTree","mid","Math","floor","leftArray","rightArray","mapLvls","sortedLeft","sortedRight","merge","mergedArray","push","shift","prev","children","toString","id","produce","leftRight","ref","MergeSortViz","tree","foreignObjectProps","translate","window","innerWidth","y","data","renderCustomNodeElement","rd3tProps","nodeDatum","fillColor","r","fill","renderForeignObjectNode","pathClassFunc","styles","node__path","orientation","freeze","BUBBLE_SORT","MERGE_SORT","AlgorithmViz","vizMap","VIZ","extendTheme","config","initialColorMode","useSystemColorMode","App","flexDir","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,WAAa,iCAAiC,aAAe,mCAAmC,WAAa,iCAAiC,WAAa,iCAAiC,OAAS,+B,kECC3MC,E,+FCGCC,EAAkDC,I,QCFlDC,EAAkB,WAC7B,IACA,EAD0BC,cAAlBC,OAER,MAAO,CAAEC,QADT,EAAQA,QACUC,UADlB,EAAiBA,UACYC,MAD7B,EAA4BA,S,SFHlBR,K,gCAAAA,E,0BAAAA,E,gCAAAA,E,yBAAAA,M,KAOL,I,EAAMS,EAAoB,IGNpBC,EAAqB,SAAC,GAAD,SAAGC,W,gBCE/BC,EAAQC,YAAY,CACxBC,KAAM,YACNC,aAAc,KACdC,SAAU,CACRC,gBADQ,SACQC,EADR,GAEN,OADoD,EAAjCC,YAMVF,EAAoBL,EAAMQ,QAA1BH,gBAEAL,IAAf,Q,OCTMS,EAAOC,OAAOD,KAAKrB,GAEnBuB,EAAwB,WAC5B,IAAMC,EJP4BC,cIQ5BC,EAAyBzB,EAAeS,GAE9C,OACE,kCACGW,EAAKM,KAAI,SAACC,GAAD,OACR,cAAC,IAAD,CAEEC,KAAK,KACLC,SAAUJ,IAAaE,EACvBG,YAAY,SACZC,aAAa,OACbC,EAAE,KACFC,EAAE,IACFC,EAAE,IACFC,QAAS,kBACPZ,EAASP,EAAiBjB,EAAc4B,MAE1CS,MAAM,MACNC,GAAIZ,IAAaE,EAAO,aAAe,aAbzC,SAeE,cAAC,IAAD,CAASC,KAAK,KAAKU,EAAE,OAAOC,MAAM,QAAlC,SACGC,oBAAUb,MAfRA,SAuBAc,iBAAKnB,G,gECvCPoB,EAAU,eAACC,EAAD,uDAAU,GAAV,OACrBC,MAAMC,KAAK,CAAEF,WAAUjB,KAAI,kBAAMoB,kBAAQ,GAAI,S,OCAlCC,EAAQC,YAAe,CAClCC,QAAS,CACPvC,UAAWwC,KCFFC,EAAa,uCAAG,WAC3BC,EACAC,EACAC,EACAC,EACAC,GAL2B,qCAAAC,EAAA,sDAM3BC,EAN2B,+BAMPlD,EAEdmD,EARqB,YAQVP,GAERQ,EAAI,EAVc,YAUXA,EAAID,EAAKhB,QAVE,iBAWzBkB,EAASD,EACAE,EAAIF,EAAI,EAZQ,YAYLE,EAAIV,EAAIT,QAZH,2CAcf,IAAIoB,SAAc,SAACC,EAAKC,GAAN,OACtBC,YAAW,WACLnB,EAAMoB,WAAWzD,YAAcX,EAAMqE,eACvCH,IAEAD,MAEDN,MArBgB,gEAwBf,IAAIW,MAAM,WAxBK,QA0BvBhB,EAAKO,GACLN,EAAKQ,GACLP,EAAUM,GACNF,EAAKG,GAAKH,EAAKE,KACjBA,EAASC,GA9BY,QAYWA,IAZX,yBAiCE,CAACH,EAAKC,GAAID,EAAKE,IAAxCF,EAAKE,GAjCkB,KAiCTF,EAAKC,GAjCI,KAkCzBJ,EAASG,GAlCgB,QAUMC,IAVN,yEAAH,8D,kBCCpBU,EAAgB,WACpB,IAAMC,EAAepE,cAErB,OACE,eAAC,IAAD,CACEqE,GAAG,MACHC,KAAK,IACLC,GAAI,EACJC,QAAQ,OACRtC,GAAIkC,EAAMnE,OAAOwE,OAAO,KACxBrC,MAAM,QANR,UAQE,cAAC,IAAD,CAAMsC,MAAM,SAAZ,SACE,cAAC,IAAD,CAASjD,KAAK,KAAd,oBAEF,cAAC,IAAD,CAAM6C,KAAM,IACZ,cAAC,IAAD,CACEK,QAAQ,UACRC,aAAW,gBACXC,SAAS,OACTC,KAAM,cAACC,EAAA,EAAD,UAMCzC,iBAAK6B,G,gBC1Bda,EAAkBC,YAAOC,IAAPD,CAAH,0BAErBD,EAAgBG,aAAe,CAC7BC,eAAgB,SAChBC,WAAY,SACZC,QAAS,QAGIhD,I,EAAAA,iBAAK0C,GCRdO,EAAuBN,YAAOO,mBAASN,KAAhBD,CAAH,gDAI1BM,EAAqBJ,aAAe,CAClCC,eAAgB,SAChBC,WAAY,SACZC,QAAS,OACTG,UAAW,SACXC,OAAQ,GACRC,OAAQ,OACRd,SAAU,IAGGU,I,EAAAA,I,mBCPTK,GAAqB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,MAAO1D,EAAyB,EAAzBA,MAAO2D,EAAkB,EAAlBA,KACjD,OACE,cAAC,IAAD,CAAMhE,EAAE,OAAOiE,OAAkB,OAAVH,EAAvB,SACE,eAAC,EAAD,WACE,cAAC,IAAD,CAAKpE,KAAK,KAAKkD,QAAQ,QAAQzC,GAAIE,EAAO6D,GAAG,MAC7C,cAAC,KAAD,UAAMF,IAFR,MAEsB,cAAC,KAAD,UAAMF,IAC1B,cAAC,KAAD,CAAK9D,EAAE,IAAP,mBAHF,KAIE,eAAC,KAAD,CAAKA,EAAE,IAAP,cAAuB,OAAV8D,EAAiB,GAAKC,EAAMD,GAAzC,aAMOvD,kBAAKsD,ICbdM,GAAuB,WAC3B,MAA0BC,mBAAwB5D,KAAlD,mBAAOuD,EAAP,KAAczC,EAAd,KACA,EAAkB8C,mBAAwB,MAA1C,mBAAO1C,EAAP,KAAUP,EAAV,KACA,EAAkBiD,mBAAwB,MAA1C,mBAAOxC,EAAP,KAAUR,EAAV,KACA,EAA4BgD,mBAAwB,MAApD,mBAAOzC,EAAP,KAAeN,EAAf,KACA,EAA8B+C,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCtG,IAA9BG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,MAEtBkG,EAAUC,qBACdT,EAAMtD,OACNsD,EAAMvE,KAAI,SAACT,EAAG+E,GAAJ,MAAe,CACvBW,gBAAiB/C,IAAMoC,GAASlC,IAAMkC,EAAQ3F,EAAUC,EACxDiC,MAAO,UACPH,MAAO,MACPwE,UAAWZ,IAAUnC,EAAV,mBAA+BtD,GAA/B,kBAAoDA,GAC/DsG,QAASjD,IAAMoC,EAAQ,GAAM,EAC7BH,OAAQ,GACRhD,KAAM,CAAEgE,QAAS,EAAGhB,OAAQ,UAI1BiB,EAAS,uCAAG,sBAAArD,EAAA,6DAChB+C,GAAW,GADK,kBAGRrD,EAAc8C,EAAO5C,EAAMC,EAAMC,EAAUC,EAAUhD,GAH7C,6DAOZuC,EAAMoB,WAAWzD,YAAcX,EAAMqE,iBACvCf,EAAK,MACLC,EAAK,MACLC,EAAU,MACViD,GAAW,IAXG,wDAAH,qDAef,OACE,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEtE,EAAE,OACFC,QAAS2E,EACTjF,SAAU0E,EACVQ,UAAWR,EAJb,sBASF,cAAC,IAAD,CAAMS,WAAW,OAAOC,SAAS,OAAjC,SACGR,EAAQ/E,KAAI,SAACwF,EAAYtD,GACxB,OACE,cAAC,EAAD,CAA8BuD,MAAOD,EAArC,SACGjB,EAAMrC,IADkBA,QAMjC,eAAC,IAAD,CAAKuC,OAAc,OAANvC,GAAoB,OAANE,GAAyB,OAAXD,EAAzC,UACE,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAMmB,SAAS,MAAf,iCAGJ,cAAC,GAAD,CAAoBgB,MAAOpC,EAAGrB,MAAOlC,EAAS4F,MAAOA,EAAOC,KAAK,MACjE,cAAC,GAAD,CAAoBF,MAAOlC,EAAGvB,MAAOlC,EAAS4F,MAAOA,EAAOC,KAAK,MACjE,cAAC,GAAD,CACEF,MAAOnC,EACPtB,MAAOhC,EACP0F,MAAOA,EACPC,KAAK,0BAMEzD,kBAAK4D,ICnFPe,GAAa,uCAAG,WAC3BhE,EACAC,EACAC,EACA+D,GAJ2B,iCAAA5D,EAAA,sDAK3BC,EAL2B,+BAKP,IAIXE,EAAI,EATc,YASXA,EAAIR,EAAIT,QATG,iBAUzB2E,EAAMlE,EAAIQ,GACVyD,EAAOzD,GACPP,EAAKO,GAELN,EADAQ,EAAIF,EAAI,GAbiB,YAelBE,GAAK,GAAKV,EAAIU,GAAKwD,GAfD,2CAiBf,IAAIvD,SAAc,SAACC,EAAKC,GAAN,OACtBC,YAAW,WACLnB,EAAMoB,WAAWzD,YAAcX,EAAMwH,eACvCtD,IAEAD,MAEDN,MAxBgB,gEA2Bf,IAAIW,MAAM,WA3BK,QA6BvBjB,EAAIU,EAAI,GAAKV,EAAIU,GACjBA,IACAR,EAAKQ,GACLV,EAAIU,EAAI,GAAKwD,EACbD,EAAOvD,EAAI,GAjCY,uBASKF,IATL,gDAoCpBR,GApCoB,0DAAH,4DCcpB6C,GAAQrD,MAAMC,KAAK,CAAEF,OAAQ,KAAMjB,KAAI,kBAAMoB,iBAAO,EAAG,QAEvD0E,GAAuB,WAC3B,MAAkBlB,mBAAwB,MAA1C,mBAAO1C,EAAP,KAAUP,EAAV,KACA,EAAkBiD,mBAAwB,MAA1C,mBAAOxC,EAAP,KAAUR,EAAV,KACA,EAA4BgD,mBAAwB,MAApD,mBAAOmB,EAAP,KAAeC,EAAf,KACA,EAA8BpB,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KAGA,EAD0BrG,cAAlBC,OACAC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,MAEtBkG,EAAUC,qBACdT,GAAMtD,OACNsD,GAAMvE,KAAI,SAACT,EAAG+E,GAAJ,MAAe,CACvBW,gBAAiB/C,IAAMoC,GAASlC,IAAMkC,EAAQ3F,EAAUC,EACxDiC,MAAO,UACPH,MAAO,MACPwE,UAAWZ,IAAUyB,EAAV,mBAA+BlH,GAA/B,kBAAoDA,GAC/DsG,QAASjD,IAAMoC,EAAQ,GAAM,EAC7BH,OAAQ,GACRhD,KAAM,CAAEgE,QAAS,EAAGhB,OAAQ,UAI1BiB,EAAS,uCAAG,sBAAArD,EAAA,6DAChB+C,GAAW,GADK,kBAGRY,GAAcnB,GAAO5C,EAAMC,EAAMoE,EAAWlH,GAHpC,6DAOZuC,EAAMoB,WAAWzD,YAAcX,EAAMwH,iBACvClE,EAAK,MACLC,EAAK,MACLoE,EAAU,MACVlB,GAAW,IAXG,wDAAH,qDAef,OACE,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEtE,EAAE,OACFC,QAAS2E,EACTjF,SAAU0E,EACVQ,UAAWR,EAJb,sBASF,cAAC,IAAD,CAAMS,WAAW,OAAOC,SAAS,OAAjC,SACGR,EAAQ/E,KAAI,SAACwF,EAAYtD,GACxB,OACE,cAAC,EAAD,CAA8BuD,MAAOD,EAArC,SACGjB,GAAMrC,IADkBA,QAMjC,eAAC,IAAD,CAAKuC,OAAc,OAANvC,GAAoB,OAANE,GAAyB,OAAX2D,EAAzC,UACE,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAMzC,SAAS,MAAf,iCAGJ,cAAC,GAAD,CAAoBgB,MAAOpC,EAAGrB,MAAOlC,EAAS4F,MAAOA,GAAOC,KAAK,MACjE,cAAC,GAAD,CAAoBF,MAAOlC,EAAGvB,MAAOlC,EAAS4F,MAAOA,GAAOC,KAAK,MACjE,cAAC,GAAD,CACEF,MAAOyB,EACPlF,MAAOhC,EACP0F,MAAOA,GACPC,KAAK,0BAMEzD,kBAAK+E,IC7FPG,GAAU,uCAAG,WACxBvE,EACAwE,EACAC,EACArE,GAJwB,uCAAAC,EAAA,sDAKxBC,EALwB,+BAKJlD,EAEdmD,EAPkB,YAOPP,GACRQ,EAAI,EARW,YAQRA,EAAID,EAAKhB,QARD,iBASbmB,EAAI,EATS,YASNA,EAAIH,EAAKhB,OAAS,EAAIiB,GAThB,wBAUdkE,EAAQnE,EAAKG,EAAI,GACjBiE,EAAOpE,EAAKG,GAXE,UAYd,IAAIC,SAAc,SAACC,GACvBE,YAAW,WACTF,MACCN,MAfe,QAiBpBkE,EAAQ9D,GACR+D,EAAS/D,EAAI,GACTiE,EAAOD,IACHE,EAAIrE,EAAKG,GACfH,EAAKG,GAAKH,EAAKG,EAAI,GACnBH,EAAKG,EAAI,GAAKkE,GAEhBxE,EAASG,GAxBW,QASmBG,IATnB,uBAQSF,IART,2DAAH,4DCMjBqE,GAAoB,WACxB,MAA0B3B,mBAAwB5D,KAAlD,mBAAOuD,EAAP,KAAczC,EAAd,KACA,EAA6B8C,mBAAwB,MAArD,mBAAO4B,EAAP,KAAkBN,EAAlB,KACA,EAA+BtB,mBAAwB,MAAvD,mBAAO6B,EAAP,KAAmBN,EAAnB,KACA,EAA8BvB,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCtG,IAA9BG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,MAEtBkG,EAAUC,qBACdT,EAAMtD,OACNsD,EAAMvE,KAAI,SAACT,EAAG+E,GAAJ,MAAe,CACvBW,gBACEuB,IAAclC,GAASmC,IAAenC,EAAQ3F,EAAUC,EAC1DiC,MAAO,UACPH,MAAO,MACPwE,UACEZ,IAAUkC,GAAalC,IAAUmC,EAAjC,mBACgB5H,GADhB,kBAEeA,GACjBsG,QAAS,EACThB,OAAQ,GACRhD,KAAM,CAAEgE,QAAS,EAAGhB,OAAQ,UAI1BiB,EAAS,uCAAG,sBAAArD,EAAA,6DAChB+C,GAAW,GADK,SAEVmB,GAAW1B,EAAO2B,EAASC,EAAUrE,GAF3B,OAGhBgD,GAAW,GACXoB,EAAQ,MACRC,EAAS,MALO,2CAAH,qDAQf,OACE,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CACE3F,EAAE,OACFC,QAAS2E,EACTjF,SAAU0E,EACVQ,UAAWR,EAJb,sBASF,cAAC,IAAD,CAAMS,WAAW,OAAOC,SAAS,OAAjC,SACGR,EAAQ/E,KAAI,SAACwF,EAAYtD,GACxB,OACE,cAAC,EAAD,CAA8BuD,MAAOD,EAArC,SACGjB,EAAMrC,IADkBA,YAUxBnB,kBAAKwF,I,uCC9DPG,GAAS,uCAAG,WACvBnC,EACAoC,GAFuB,2CAAA5E,EAAA,yDAGvB6E,EAHuB,+BAGF,EACrBC,IAJuB,iCAKvBC,EALuB,gCAMvB9E,EANuB,+BAMHlD,IAEhByF,EAAMtD,OAAS,GARI,yCASdsD,GATc,cAYjBwC,EAAMC,KAAKC,MAAM1C,EAAMtD,OAAS,GAChCiG,EAA2B3C,EAAMtF,MAAM,EAAG8H,GAC1CI,EAA4B5C,EAAMtF,MAAM8H,GAdvB,UAgBjB,IAAI1E,SAAc,SAACC,GACvBE,YAAW,WACTF,MACCN,MAnBkB,eAsBvBoF,GACE7C,EAAMtF,MAAM,EAAG8H,GACfxC,EAAMtF,MAAM8H,GACZJ,EACAC,EACAC,EACAC,GA5BqB,UA+BiBJ,GACtCQ,EACAP,EACAC,EAAa,GAlCQ,eA+BjBS,EA/BiB,iBAoCkBX,GACvCS,EACAR,EACAC,EAAa,GACb,GACA,GAzCqB,eAoCjBU,EApCiB,yBA4ChBC,GAAMF,EAAYC,IA5CF,4CAAH,wDA+ChBC,GAAQ,SACZL,EACAC,GAGA,IADA,IAAMK,EAA6B,GAC5BN,EAAUjG,QAAUkG,EAAWlG,QAAQ,CAC5C,YAAsBiG,EAAtB,MACA,YAAuBC,EAAvB,MAEEK,EAAYC,KAAKN,EAAWO,SAE5BF,EAAYC,KAAKP,EAAUQ,SAI/B,KAAOR,EAAUjG,QACfuG,EAAYC,KAAKP,EAAUQ,SAG7B,KAAOP,EAAWlG,QAChBuG,EAAYC,KAAKN,EAAWO,SAG9B,OAAOF,GAGHJ,GAAU,SACdF,EACAC,EACAR,GAII,IAHJC,EAGG,uDAHkB,EACrBC,IAEG,yDADHC,EACG,wDACCD,EACiB,IAAfD,EACFD,GAAQ,SAACgB,GAAD,oBAAC,gBACJA,GADG,IAENC,SAAU,CACR,CAAEzI,KAAK,IAAD,OAAM+H,EAAUW,WAAhB,KAA+BD,SAAU,GAAIE,GAAI,GACvD,CAAE3I,KAAK,IAAD,OAAMgI,EAAWU,WAAjB,KAAgCD,SAAU,GAAIE,GAAI,SAGpC,IAAflB,EACTD,EACEoB,cAAQ,SAACJ,GAAe,IAAD,GAErB,EADA,YAAmBA,EAAKC,SAAxB,MACSA,UAASH,KAAlB,QACK,CACD,CAAEtI,KAAK,IAAD,OAAM+H,EAAUW,WAAhB,KAA+BD,SAAU,IAC/C,CAAEzI,KAAK,IAAD,OAAMgI,EAAWU,WAAjB,KAAgCD,SAAU,UAKhC,IAAfhB,GACTD,EACEoB,cAAQ,SAACJ,GAAe,IAAD,EACrB,cAOIA,EAAKC,SAPT,GAEevB,EAFf,iBAEIuB,SAFJ,MAKeI,EALf,iBAKIJ,SALJ,OAcA,EAL6B,IAAzBvB,EAAKuB,SAAS3G,OACVoF,EAAKuB,SAELI,EAAUJ,UAEdH,KAAJ,QACK,CACD,CAAEtI,KAAK,IAAD,OAAM+H,EAAUW,WAAhB,KAA+BD,SAAU,IAC/C,CAAEzI,KAAK,IAAD,OAAMgI,EAAWU,WAAjB,KAAgCD,SAAU,UAMjDd,IACU,IAAfF,EACFD,EACEoB,cAAQ,SAACJ,GAAe,IAAD,GAErB,EADA,YAAsBA,EAAKC,SAA3B,MACUA,UAASH,KAAnB,QACK,CACD,CAAEtI,KAAK,IAAD,OAAM+H,EAAUW,WAAhB,KAA+BD,SAAU,IAC/C,CAAEzI,KAAK,IAAD,OAAMgI,EAAWU,WAAjB,KAAgCD,SAAU,UAKhC,IAAfhB,EACTD,EACEoB,cAAQ,SAACJ,GAAe,IAAD,EAIrB,cAKIA,EAAKC,SALT,GAEiBI,EAFjB,iBAEIJ,SAFJ,MAIExB,EAJF,KAMI6B,EAAM,KACV,GAAkC,IAA9BD,EAAUJ,SAAS3G,OACrBgH,EAAMD,EAAUJ,cACX,GAAuB,IAAnBxB,EAAMwB,SACfK,EAAM7B,EAAMwB,aACP,CAELK,EADA,YAAyB7B,EAAMwB,SAA/B,MACmBA,UAErB,EAAAK,GAAIR,KAAJ,QACK,CACD,CAAEtI,KAAK,IAAD,OAAM+H,EAAUW,WAAhB,KAA+BD,SAAU,IAC/C,CAAEzI,KAAK,IAAD,OAAMgI,EAAWU,WAAjB,KAAgCD,SAAU,UAKjC,IAAfhB,GAGRD,EAAQoB,cAAQ,SAACJ,GAAe,IAAD,EAC7B,cAAoDA,EAAKC,SAAzD,sBAAQA,SAAR,GAAmCI,EAAnC,iBAAsBJ,SAAtB,MACIK,EAAM,KACV,GAAkC,IAA9BD,EAAUJ,SAAS3G,OACrBgH,EAAMD,EAAUJ,aACX,CACL,kBAAwDD,EAAKC,SAA7D,sBAAUA,SAAV,GACAK,EADA,iBAAwBL,SAAxB,MACiBA,UAGnB,EAAAK,GAAIR,KAAJ,QACK,CACD,CAAEtI,KAAK,IAAD,OAAM+H,EAAUW,WAAhB,KAA+BD,SAAU,IAC/C,CAAEzI,KAAK,IAAD,OAAMgI,EAAWU,WAAjB,KAAgCD,SAAU,Y,qBCpKtDM,GAAe,WACnB,MAA0BtD,mBAAwB5D,EAAQ,KAA1D,mBAAOuD,EAAP,KACA,GADA,KAC8BK,oBAAkB,IAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,CAC/BzF,KAAK,IAAD,OAAMoF,EAAMsD,WAAZ,KACJD,SAAU,KAFZ,mBAAOO,EAAP,KAAaxB,EAAb,KAKMvB,EAAS,uCAAG,sBAAArD,EAAA,6DAChB+C,GAAW,GADK,SAEV4B,GAAUnC,EAAOoC,GAFP,OAGhB7B,GAAW,GAHK,2CAAH,qDAMPnG,EAAYH,IAAZG,QACFyJ,EAAqB,CAAE1H,MAAO,IAAKyD,OAAQ,IAAKmC,EAAG,IAEzD,OACE,sBAAKb,MAAO,CAAE/E,MAAO,QAASyD,OAAQ,SAAtC,UACE,cAAC,IAAD,CAAQ1D,QAAS2E,EAAWC,UAAWR,EAAvC,oBAGA,cAAC,KAAD,CACEwD,UAAW,CAAE/B,EAAGgC,OAAOC,WAAa,EAAGC,EAAG,IAC1CC,KAAMN,EACNO,wBAAyB,SAACC,GAAD,OA1CD,SAAC,GAIrB,IAHVC,EAGS,EAHTA,UACAC,EAES,EAFTA,UACAT,EACS,EADTA,mBAEA,OACE,8BACE,wBAAQU,EAAG,GAAIrD,MAAO,CAAEsD,KAAMF,KAC9B,2DAAmBT,GAAnB,aACE,qBAAK3C,MAAO,CAAE/E,MAAO,IAArB,SACE,oBAAI+E,MAAO,CAAEvB,UAAW,UAAxB,SAAqC0E,EAAUzJ,eAiC/C6J,CAAwB,6BACnBL,GADkB,IAErBE,UAAWlK,EACXyJ,yBAGJa,cAAe,kBAAMC,KAAOC,YAC5BC,YAAY,iBAMLrI,kBAAKmH,ICrDLlI,GAPmCL,OAAO0J,QAAP,KAAA1J,OAAA,IAAAA,CAAA,EAC/CtB,EAAMqE,eAAiBiC,IADwBhF,OAAA,IAAAA,CAAA,EAE/CtB,EAAMiL,YAAc/C,IAF2B5G,OAAA,IAAAA,CAAA,EAG/CtB,EAAMkL,WAAarB,IAH4BvI,OAAA,IAAAA,CAAA,EAI/CtB,EAAMwH,eAAiBH,IAJwB,ICG5C8D,GAAmB,WACvB,IAAMzJ,EAAyBzB,EAAeS,GAC9C,GAAiB,OAAbgB,IAAsB0J,GAAO1J,GAC/B,OAAO,KAGT,IAAM2J,EAAMD,GAAO1J,GAEnB,OACE,cAAC,IAAD,CAAKS,EAAE,OAAP,SACE,cAACkJ,EAAD,OAKS3I,kBAAKyI,I,UCLL3G,GATM8G,aAAY,CAC/BC,OAN0B,CAC1BC,iBAAkB,QAClBC,oBAAoB,GAKpBpL,OAAQ,CACNC,QAAS,UACTC,UAAW,UACXC,MAAO,aCSIkL,GAhBC,WACd,OACE,eAAC,IAAD,CAAgBlH,MAAOA,GAAvB,UACE,cAAC,EAAD,IACA,eAAC,IAAD,CAAMsB,OAAO,QAAQ6F,QAAS,CAAC,SAAU,SAAU,MAAO,OAA1D,UACE,cAAC,IAAD,CAAK1J,EAAE,OAAOM,EAAG,CAAC,OAAQ,OAAQ,MAAO,OAAQL,EAAE,QAAnD,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAKD,EAAE,OAAOM,EAAG,CAAC,OAAQ,OAAQ,MAAO,OAAzC,SACE,cAAC,GAAD,aCHUqJ,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlJ,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJmJ,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee525671.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"node__root\":\"MergeSortViz_node__root__2Sd86\",\"node__branch\":\"MergeSortViz_node__branch__uRYqa\",\"node__leaf\":\"MergeSortViz_node__leaf__1ZJAp\",\"node__path\":\"MergeSortViz_node__path__3kCC3\",\"colors\":\"MergeSortViz_colors__1y244\"};","import { Colors } from '@chakra-ui/react'\r\n\r\nexport enum ALGOS {\r\n  SELECTION_SORT = 'SELECTION_SORT',\r\n  BUBBLE_SORT = 'BUBBLE_SORT',\r\n  INSERTION_SORT = 'INSERTION_SORT',\r\n  MERGE_SORT = 'MERGE_SORT',\r\n}\r\n\r\nexport const DEFAULT_STEP_TIME = 1000\r\n\r\nexport interface AppColors extends Colors {\r\n  [key: string]: string\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import { useTheme, Theme } from '@chakra-ui/react'\r\nimport { AppColors } from 'app/const'\r\n\r\nexport const useCustomColors = () => {\r\n  const { colors }: Theme = useTheme()\r\n  const { saltBox, persimmon, tidal } = colors as unknown as AppColors\r\n  return { saltBox, persimmon, tidal }\r\n}\r\n","import { RootState } from './store'\r\nimport { ALGOS } from 'app/const'\r\n\r\nexport const selectSelectedAlgo = ({ algorithm }: RootState): ALGOS | null =>\r\n  algorithm\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ALGOS } from 'app/const'\r\n\r\ntype ALGOState = ALGOS | null\r\n\r\nconst slice = createSlice({\r\n  name: 'algorithm',\r\n  initialState: null as ALGOState,\r\n  reducers: {\r\n    selectAlgorithm(_, { payload }: PayloadAction<ALGOS>) {\r\n      return payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { selectAlgorithm } = slice.actions\r\n\r\nexport default slice.reducer\r\n","import { FC, memo } from 'react'\r\nimport { Heading, Button } from '@chakra-ui/react'\r\nimport { useAppSelector, useAppDispatch } from 'app/hooks'\r\nimport { ALGOS } from 'app/const'\r\nimport { selectSelectedAlgo } from 'app/selectors'\r\nimport { startCase } from 'lodash'\r\nimport { selectAlgorithm } from './slice'\r\n\r\nconst keys = Object.keys(ALGOS)\r\n\r\nconst AlgorithmSelector: FC = () => {\r\n  const dispatch = useAppDispatch()\r\n  const selected: ALGOS | null = useAppSelector(selectSelectedAlgo)\r\n\r\n  return (\r\n    <section>\r\n      {keys.map((algo: string) => (\r\n        <Button\r\n          key={algo}\r\n          size=\"sm\"\r\n          disabled={selected === algo}\r\n          colorScheme=\"purple\"\r\n          borderRadius=\"full\"\r\n          h=\"10\"\r\n          p=\"5\"\r\n          m=\"5\"\r\n          onClick={() =>\r\n            dispatch(selectAlgorithm((ALGOS as any)[algo] as ALGOS))\r\n          }\r\n          width=\"75%\"\r\n          bg={selected === algo ? 'purple.900' : 'purple.700'}\r\n        >\r\n          <Heading size=\"sm\" w=\"100%\" color=\"white\">\r\n            {startCase(algo)}\r\n          </Heading>\r\n        </Button>\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default memo(AlgorithmSelector)\r\n","import { random } from 'lodash'\r\n\r\nexport const factArr = (length = 10) =>\r\n  Array.from({ length }).map(() => random(-10, 100))\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\r\nimport { AlgorithmReducer } from 'containers'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    algorithm: AlgorithmReducer,\r\n  },\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n","import { store } from 'app/store'\r\nimport { DEFAULT_STEP_TIME,ALGOS } from 'app/const'\r\n\r\nexport const selectionSort = async (\r\n  arr: Array<number>,\r\n  setI: (n: number) => void,\r\n  setJ: (n: number) => void,\r\n  setMinIdx: (n: number) => void,\r\n  setArray: (arr: Array<number>) => void,\r\n  stepSpeed: number = DEFAULT_STEP_TIME\r\n) => {\r\n  const copy = [...arr]\r\n  let minIdx: any\r\n  for (let i = 0; i < copy.length; i++) {\r\n    minIdx = i\r\n    for (let j = i + 1; j < arr.length; j++) {\r\n      try {\r\n        await new Promise<void>((res, rej) =>\r\n          setTimeout(() => {\r\n            if (store.getState().algorithm !== ALGOS.SELECTION_SORT) {\r\n              rej()\r\n            } else {\r\n              res()\r\n            }\r\n          }, stepSpeed)\r\n        )\r\n      } catch {\r\n        throw new Error('Nothing')\r\n      }\r\n      setI(i)\r\n      setJ(j)\r\n      setMinIdx(minIdx)\r\n      if (copy[j] < copy[minIdx]) {\r\n        minIdx = j\r\n      }\r\n    }\r\n    ;[copy[minIdx], copy[i]] = [copy[i], copy[minIdx]]\r\n    setArray(copy)\r\n  }\r\n}\r\n","import { FC, memo } from 'react'\r\nimport { Flex, Heading, useTheme, Theme, IconButton } from '@chakra-ui/react'\r\nimport { SunIcon } from '@chakra-ui/icons'\r\n\r\nconst AppHeader: FC = () => {\r\n  const theme: Theme = useTheme()\r\n\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      flex=\"1\"\r\n      mb={4}\r\n      padding=\"1rem\"\r\n      bg={theme.colors.purple[700]}\r\n      color=\"white\"\r\n    >\r\n      <Flex align=\"center\">\r\n        <Heading size=\"sm\">TODO</Heading>\r\n      </Flex>\r\n      <Flex flex={1} />\r\n      <IconButton\r\n        variant=\"outline\"\r\n        aria-label=\"Theme changer\"\r\n        fontSize=\"20px\"\r\n        icon={<SunIcon />}\r\n      />\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(AppHeader)\r\n","import { memo } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Flex } from '@chakra-ui/react'\r\n\r\nconst CenteredFlexBox = styled(Flex)``\r\n\r\nCenteredFlexBox.defaultProps = {\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  display: 'flex',\r\n}\r\n\r\nexport default memo(CenteredFlexBox)\r\n","import { animated } from 'react-spring'\r\nimport styled from '@emotion/styled'\r\nimport { Flex } from '@chakra-ui/react'\r\n\r\nconst ArrayAnimatedElement = styled(animated(Flex))`\r\n  cursor: pointer;\r\n`\r\n\r\nArrayAnimatedElement.defaultProps = {\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  display: 'flex',\r\n  textAlign: 'center',\r\n  height: 60,\r\n  margin: '1rem',\r\n  fontSize: 40,\r\n}\r\n\r\nexport default ArrayAnimatedElement\r\n","import { memo } from 'react'\r\nimport { Flex, Tag, Kbd } from '@chakra-ui/react'\r\nimport { CenteredFlexBox } from 'dump'\r\n\r\ninterface Props {\r\n  index: number | null\r\n  array: Array<number>\r\n  color: string\r\n  text: string\r\n}\r\n\r\nconst ArrayIterationData = ({ index, array, color, text }: Props) => {\r\n  return (\r\n    <Flex m=\"1rem\" hidden={index === null}>\r\n      <CenteredFlexBox>\r\n        <Tag size=\"sm\" variant=\"solid\" bg={color} mr=\"2\" />\r\n        <Kbd>{text}</Kbd> = <Kbd>{index}</Kbd>\r\n        <Kbd m=\"2\">value</Kbd> =\r\n        <Kbd m=\"2\">[{index === null ? '' : array[index]}]</Kbd>\r\n      </CenteredFlexBox>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default memo(ArrayIterationData)\r\n","import { memo, FC, useState } from 'react'\r\nimport { Flex, Button, Box, Divider, Text } from '@chakra-ui/react'\r\nimport { useSprings } from 'react-spring'\r\nimport { factArr } from 'app/factories'\r\nimport { useCustomColors } from 'app/hooks'\r\nimport { selectionSort } from './algo'\r\nimport { DEFAULT_STEP_TIME, AppColors, ALGOS } from 'app/const'\r\nimport { ArrayAnimatedElement, ArrayIterationData } from 'dump'\r\n\r\nimport { store } from 'app/store'\r\n\r\nconst SelectionSortViz: FC = () => {\r\n  const [array, setArray] = useState<Array<number>>(factArr())\r\n  const [i, setI] = useState<number | null>(null)\r\n  const [j, setJ] = useState<number | null>(null)\r\n  const [minIdx, setMinIdx] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const { saltBox, persimmon, tidal } = useCustomColors()\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor: i === index || j === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow: index === minIdx ? `5px 10px ${tidal}` : `0px 0px ${tidal}`,\r\n      opacity: i === index ? 0.5 : 1,\r\n      height: 60,\r\n      from: { opacity: 0, height: 120 }\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    try {\r\n      await selectionSort(array, setI, setJ, setMinIdx,setArray, DEFAULT_STEP_TIME)\r\n    } catch (error) {\r\n     // Display error message\r\n    }\r\n    if (store.getState().algorithm === ALGOS.SELECTION_SORT) {\r\n      setI(null)\r\n      setJ(null)\r\n      setMinIdx(null)\r\n      setStarted(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m='1rem'\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight='bold' flexWrap='wrap'>\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n      <Box hidden={i === null && j === null && minIdx === null}>\r\n        <Divider />\r\n        <Flex>\r\n          <Text fontSize='4xl'>Iteration data</Text>\r\n        </Flex>\r\n      </Box>\r\n      <ArrayIterationData index={i} color={saltBox} array={array} text='i' />\r\n      <ArrayIterationData index={j} color={saltBox} array={array} text='j' />\r\n      <ArrayIterationData\r\n        index={minIdx}\r\n        color={tidal}\r\n        array={array}\r\n        text='current min index'\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(SelectionSortViz)\r\n","import { store } from 'app/store'\r\nimport { ALGOS } from 'app/const'\r\n\r\nexport const insertionSort = async (\r\n  arr: Array<number>,\r\n  setI: (n: number) => void,\r\n  setJ: (n: number) => void,\r\n  setKey: (n: number) => void,\r\n  stepSpeed: number = 1000\r\n) => {\r\n  let key: any\r\n  let j: any\r\n  for (let i = 1; i < arr.length; i++) {\r\n    key = arr[i]\r\n    setKey(i)\r\n    setI(i)\r\n    j = i - 1\r\n    setJ(j)\r\n    while (j >= 0 && arr[j] > key) {\r\n      try {\r\n        await new Promise<void>((res, rej) =>\r\n          setTimeout(() => {\r\n            if (store.getState().algorithm !== ALGOS.INSERTION_SORT) {\r\n              rej()\r\n            } else {\r\n              res()\r\n            }\r\n          }, stepSpeed)\r\n        )\r\n      } catch {\r\n        throw new Error('Nothing')\r\n      }\r\n      arr[j + 1] = arr[j]\r\n      j--\r\n      setJ(j)\r\n      arr[j + 1] = key\r\n      setKey(j + 1)\r\n    }\r\n  }\r\n  return arr\r\n}\r\n","import { memo, FC, useState } from 'react'\r\nimport {\r\n  Flex,\r\n  Button,\r\n  Box,\r\n  Theme,\r\n  useTheme,\r\n  Divider,\r\n  Text\r\n} from '@chakra-ui/react'\r\nimport { useSprings } from 'react-spring'\r\nimport { random } from 'lodash'\r\nimport { insertionSort } from './algo'\r\nimport { DEFAULT_STEP_TIME, AppColors, ALGOS } from 'app/const'\r\nimport { ArrayAnimatedElement, ArrayIterationData } from 'dump'\r\nimport { store } from 'app/store'\r\n\r\nconst array = Array.from({ length: 10 }).map(() => random(0, 100))\r\n\r\nconst InsertionSortViz: FC = () => {\r\n  const [i, setI] = useState<number | null>(null)\r\n  const [j, setJ] = useState<number | null>(null)\r\n  const [keyIdx, setKeyInx] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n\r\n  const { colors }: Theme = useTheme()\r\n  const { saltBox, persimmon, tidal } = colors as unknown as AppColors\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor: i === index || j === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow: index === keyIdx ? `5px 10px ${tidal}` : `0px 0px ${tidal}`,\r\n      opacity: i === index ? 0.5 : 1,\r\n      height: 60,\r\n      from: { opacity: 0, height: 120 }\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    try {\r\n      await insertionSort(array, setI, setJ, setKeyInx, DEFAULT_STEP_TIME)\r\n    } catch (error) {\r\n      // Display error message\r\n    }\r\n    if (store.getState().algorithm === ALGOS.INSERTION_SORT) {\r\n      setI(null)\r\n      setJ(null)\r\n      setKeyInx(null)\r\n      setStarted(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m='1rem'\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight='bold' flexWrap='wrap'>\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n      <Box hidden={i === null && j === null && keyIdx === null}>\r\n        <Divider />\r\n        <Flex>\r\n          <Text fontSize='4xl'>Iteration data</Text>\r\n        </Flex>\r\n      </Box>\r\n      <ArrayIterationData index={i} color={saltBox} array={array} text='i' />\r\n      <ArrayIterationData index={j} color={saltBox} array={array} text='j' />\r\n      <ArrayIterationData\r\n        index={keyIdx}\r\n        color={tidal}\r\n        array={array}\r\n        text='Current Key Index'\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(InsertionSortViz)\r\n","import { DEFAULT_STEP_TIME } from 'app/const'\r\n\r\nexport const bubbleSort = async (\r\n  arr: Array<number>,\r\n  setLeft: (n: number) => void,\r\n  setRight: (n: number) => void,\r\n  setArray: (arr: Array<number>) => void,\r\n  stepSpeed: number = DEFAULT_STEP_TIME\r\n) => {\r\n  const copy = [...arr]\r\n  for (let i = 0; i < copy.length; i++) {\r\n    for (let j = 0; j < copy.length - 1 - i; j++) {\r\n      const right = copy[j + 1]\r\n      const left = copy[j]\r\n      await new Promise<void>((res) => {\r\n        setTimeout(() => {\r\n          res()\r\n        }, stepSpeed)\r\n      })\r\n      setLeft(j)\r\n      setRight(j + 1)\r\n      if (left > right) {\r\n        const x = copy[j]\r\n        copy[j] = copy[j + 1]\r\n        copy[j + 1] = x\r\n      }\r\n      setArray(copy)\r\n    }\r\n  }\r\n}\r\n","import { memo, FC, useState } from 'react'\r\nimport { useSprings } from 'react-spring'\r\nimport { Flex, Button } from '@chakra-ui/react'\r\nimport { useCustomColors } from 'app/hooks'\r\nimport { factArr } from 'app/factories'\r\nimport { ArrayAnimatedElement } from 'dump'\r\nimport { bubbleSort } from './algo'\r\n\r\nconst BubbleSortViz: FC = () => {\r\n  const [array, setArray] = useState<Array<number>>(factArr())\r\n  const [leftIndex, setLeft] = useState<number | null>(null)\r\n  const [rightIndex, setRight] = useState<number | null>(null)\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const { saltBox, persimmon, tidal } = useCustomColors()\r\n\r\n  const springs = useSprings(\r\n    array.length,\r\n    array.map((_, index) => ({\r\n      backgroundColor:\r\n        leftIndex === index || rightIndex === index ? saltBox : persimmon,\r\n      color: '#F2F2F2',\r\n      width: '10%',\r\n      boxShadow:\r\n        index === leftIndex || index === rightIndex\r\n          ? `5px 10px ${tidal}`\r\n          : `0px 0px ${tidal}`,\r\n      opacity: 1,\r\n      height: 60,\r\n      from: { opacity: 0, height: 120 },\r\n    }))\r\n  )\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    await bubbleSort(array, setLeft, setRight, setArray)\r\n    setStarted(false)\r\n    setLeft(null)\r\n    setRight(null)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        <Button\r\n          m=\"1rem\"\r\n          onClick={startAlgo}\r\n          disabled={started}\r\n          isLoading={started}\r\n        >\r\n          START!\r\n        </Button>\r\n      </Flex>\r\n      <Flex fontWeight=\"bold\" flexWrap=\"wrap\">\r\n        {springs.map((props: any, i) => {\r\n          return (\r\n            <ArrayAnimatedElement key={i} style={props}>\r\n              {array[i]}\r\n            </ArrayAnimatedElement>\r\n          )\r\n        })}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(BubbleSortViz)\r\n","import { DEFAULT_STEP_TIME } from 'app/const'\r\nimport { produce, original } from 'immer'\r\n\r\nexport const mergeSort = async (\r\n  array: Array<number>,\r\n  setTree: (obj: any) => void,\r\n  depthLevel: number = 1,\r\n  leftTree: boolean = true,\r\n  rightTree: boolean = false,\r\n  stepSpeed: number = DEFAULT_STEP_TIME\r\n): Promise<Array<number>> => {\r\n  if (array.length < 2) {\r\n    return array\r\n  }\r\n\r\n  const mid = Math.floor(array.length / 2)\r\n  const leftArray: Array<number> = array.slice(0, mid)\r\n  const rightArray: Array<number> = array.slice(mid)\r\n\r\n  await new Promise<void>((res) => {\r\n    setTimeout(() => {\r\n      res()\r\n    }, stepSpeed)\r\n  })\r\n\r\n  mapLvls(\r\n    array.slice(0, mid),\r\n    array.slice(mid),\r\n    setTree,\r\n    depthLevel,\r\n    leftTree,\r\n    rightTree\r\n  )\r\n\r\n  const sortedLeft: Array<number> = await mergeSort(\r\n    leftArray,\r\n    setTree,\r\n    depthLevel + 1\r\n  )\r\n  const sortedRight: Array<number> = await mergeSort(\r\n    rightArray,\r\n    setTree,\r\n    depthLevel + 1,\r\n    false,\r\n    true\r\n  )\r\n\r\n  return merge(sortedLeft, sortedRight)\r\n}\r\n\r\nconst merge = (\r\n  leftArray: Array<number>,\r\n  rightArray: Array<number>\r\n): Array<number> => {\r\n  const mergedArray: Array<number> = []\r\n  while (leftArray.length && rightArray.length) {\r\n    const [firstInLeft] = leftArray\r\n    const [firstInRight] = rightArray\r\n    if (firstInLeft > firstInRight) {\r\n      mergedArray.push(rightArray.shift() as number)\r\n    } else {\r\n      mergedArray.push(leftArray.shift() as number)\r\n    }\r\n  }\r\n\r\n  while (leftArray.length) {\r\n    mergedArray.push(leftArray.shift() as number)\r\n  }\r\n\r\n  while (rightArray.length) {\r\n    mergedArray.push(rightArray.shift() as number)\r\n  }\r\n\r\n  return mergedArray\r\n}\r\n\r\nconst mapLvls = (\r\n  leftArray: Array<number>,\r\n  rightArray: Array<number>,\r\n  setTree: (obj: any) => void,\r\n  depthLevel: number = 1,\r\n  leftTree: boolean = true,\r\n  rightTree: boolean = false\r\n) => {\r\n  if (leftTree) {\r\n    if (depthLevel === 1) {\r\n      setTree((prev: any) => ({\r\n        ...prev,\r\n        children: [\r\n          { name: `[${leftArray.toString()}]`, children: [], id: 1 },\r\n          { name: `[${rightArray.toString()}]`, children: [], id: 2 },\r\n        ],\r\n      }))\r\n    } else if (depthLevel === 2) {\r\n      setTree(\r\n        produce((prev: any) => {\r\n          const [leftNode] = prev.children\r\n          leftNode.children.push(\r\n            ...[\r\n              { name: `[${leftArray.toString()}]`, children: [] },\r\n              { name: `[${rightArray.toString()}]`, children: [] },\r\n            ]\r\n          )\r\n        })\r\n      )\r\n    } else if (depthLevel === 3) {\r\n      setTree(\r\n        produce((prev: any) => {\r\n          const [\r\n            {\r\n              children: [left],\r\n            },\r\n            {\r\n              children: [leftRight],\r\n            },\r\n          ] = prev.children\r\n          let ref = null\r\n          if (left.children.length === 0) {\r\n            ref = left.children\r\n          } else {\r\n            ref = leftRight.children\r\n          }\r\n          ref.push(\r\n            ...[\r\n              { name: `[${leftArray.toString()}]`, children: [] },\r\n              { name: `[${rightArray.toString()}]`, children: [] },\r\n            ]\r\n          )\r\n        })\r\n      )\r\n    }\r\n  } else if (rightTree) {\r\n    if (depthLevel === 2) {\r\n      setTree(\r\n        produce((prev: any) => {\r\n          const [, rightNode] = prev.children\r\n          rightNode.children.push(\r\n            ...[\r\n              { name: `[${leftArray.toString()}]`, children: [] },\r\n              { name: `[${rightArray.toString()}]`, children: [] },\r\n            ]\r\n          )\r\n        })\r\n      )\r\n    } else if (depthLevel === 3) {\r\n      setTree(\r\n        produce((prev: any) => {\r\n          // if the root->left->right is empty then add to it\r\n          // else if root->right children is emtype the add to it\r\n          // else add to root->right->right\r\n          const [\r\n            {\r\n              children: [, leftRight],\r\n            },\r\n            right,\r\n          ] = prev.children\r\n          let ref = null\r\n          if (leftRight.children.length === 0) {\r\n            ref = leftRight.children\r\n          } else if (right.children === 0) {\r\n            ref = right.children\r\n          } else {\r\n            const [, rightOfRight] = right.children\r\n            ref = rightOfRight.children\r\n          }\r\n          ref.push(\r\n            ...[\r\n              { name: `[${leftArray.toString()}]`, children: [] },\r\n              { name: `[${rightArray.toString()}]`, children: [] },\r\n            ]\r\n          )\r\n        })\r\n      )\r\n    }else if (depthLevel === 4) {\r\n      // will always be root->left->right->right\r\n      // or root->right->right->right\r\n      setTree(produce((prev: any) => {\r\n        const [{children: [, {children: [, leftRight]}]}] = prev.children\r\n        let ref = null\r\n        if (leftRight.children.length === 0) {\r\n          ref = leftRight.children\r\n        } else {\r\n          const [, {children: [, {children: [, rightRight]}]} ] = prev.children\r\n          ref = rightRight.children\r\n        }\r\n        \r\n        ref.push(\r\n          ...[\r\n            { name: `[${leftArray.toString()}]`, children: [] },\r\n            { name: `[${rightArray.toString()}]`, children: [] },\r\n          ]\r\n        )\r\n      }))\r\n    }\r\n  }\r\n}\r\n","import { memo, useState } from 'react'\r\nimport { useCustomColors } from 'app/hooks'\r\nimport Tree from 'react-d3-tree'\r\nimport { Button } from '@chakra-ui/react'\r\nimport { mergeSort } from './algo'\r\nimport styles from './MergeSortViz.module.css'\r\nimport { factArr } from 'app/factories'\r\n\r\nconst renderForeignObjectNode = ({\r\n  nodeDatum,\r\n  fillColor,\r\n  foreignObjectProps,\r\n}: any) => {\r\n  return (\r\n    <g>\r\n      <circle r={15} style={{ fill: fillColor }}></circle>\r\n      <foreignObject {...foreignObjectProps}>\r\n        <div style={{ width: 90 }}>\r\n          <h3 style={{ textAlign: 'center' }}>{nodeDatum.name}</h3>\r\n        </div>\r\n      </foreignObject>\r\n    </g>\r\n  )\r\n}\r\n\r\nconst MergeSortViz = () => {\r\n  const [array, setArray] = useState<Array<number>>(factArr(10))\r\n  const [started, setStarted] = useState<boolean>(false)\r\n  const [tree, setTree] = useState({\r\n    name: `[${array.toString()}]`,\r\n    children: [],\r\n  })\r\n\r\n  const startAlgo = async () => {\r\n    setStarted(true)\r\n    await mergeSort(array, setTree)\r\n    setStarted(false)\r\n  }\r\n\r\n  const { saltBox } = useCustomColors()\r\n  const foreignObjectProps = { width: 500, height: 200, x: 20 }\r\n\r\n  return (\r\n    <div style={{ width: '100vw', height: '100vh' }}>\r\n      <Button onClick={startAlgo} isLoading={started}>\r\n        START!\r\n      </Button>\r\n      <Tree\r\n        translate={{ x: window.innerWidth / 4, y: 20 }}\r\n        data={tree}\r\n        renderCustomNodeElement={(rd3tProps) =>\r\n          renderForeignObjectNode({\r\n            ...rd3tProps,\r\n            fillColor: saltBox,\r\n            foreignObjectProps,\r\n          })\r\n        }\r\n        pathClassFunc={() => styles.node__path}\r\n        orientation=\"vertical\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(MergeSortViz)\r\n","import { ALGOS } from 'app/const'\r\nimport { NamedExoticComponent } from 'react'\r\nimport { SelectionSortViz, BubbleSortViz, MergeSortViz,insertionSort } from './VizComponent'\r\n\r\nconst map: Record<string, NamedExoticComponent> = Object.freeze({\r\n  [ALGOS.SELECTION_SORT]: SelectionSortViz,\r\n  [ALGOS.BUBBLE_SORT]: BubbleSortViz,\r\n  [ALGOS.MERGE_SORT]: MergeSortViz,\r\n  [ALGOS.INSERTION_SORT]: insertionSort,\r\n})\r\n\r\nexport default map\r\n","import { memo, FC } from 'react'\r\nimport { ALGOS } from 'app/const'\r\nimport { useAppSelector } from 'app/hooks'\r\nimport { Box } from '@chakra-ui/react'\r\nimport { selectSelectedAlgo } from 'app/selectors'\r\nimport vizMap from './vizMap'\r\n\r\nconst AlgorithmViz: FC = () => {\r\n  const selected: ALGOS | null = useAppSelector(selectSelectedAlgo)\r\n  if (selected === null || !vizMap[selected]) {\r\n    return null\r\n  }\r\n\r\n  const VIZ = vizMap[selected]\r\n\r\n  return (\r\n    <Box m=\"1rem\">\r\n      <VIZ />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(AlgorithmViz)\r\n","import { extendTheme, ThemeConfig, Theme } from '@chakra-ui/react'\r\nimport { AppColors } from 'app/const'\r\n\r\nconst config: ThemeConfig = {\r\n  initialColorMode: 'light',\r\n  useSystemColorMode: false,\r\n}\r\n\r\nconst theme: Theme = extendTheme({\r\n  config,\r\n  colors: {\r\n    saltBox: '#705E78',\r\n    persimmon: '#FF665A',\r\n    tidal: '#F3FEB0',\r\n  } as AppColors,\r\n})\r\n\r\nexport default theme\r\n","import { FC } from 'react'\r\nimport { ChakraProvider, Box, Flex } from '@chakra-ui/react'\r\nimport { AlgorithmSelector, AlgorithmViz } from 'containers'\r\nimport { AppHeader } from 'dump'\r\nimport theme from './theme'\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <AppHeader />\r\n      <Flex height=\"100vh\" flexDir={['column', 'column', 'row', 'row']}>\r\n        <Box h=\"100%\" w={['100%', '100%', '25%', '25%']} p=\".5rem\">\r\n          <AlgorithmSelector />\r\n        </Box>\r\n        <Box h=\"100%\" w={['100%', '100%', '75%', '75%']}>\r\n          <AlgorithmViz />\r\n        </Box>\r\n      </Flex>\r\n    </ChakraProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}